/* Generated By:JJTree&JavaCC: Do not edit this line. SalsaParser.java */
    package salsa_lite.compiler;

    import salsa_lite.compiler.definitions.*;

    import java.util.Vector;
    import java.util.LinkedList;

    public class SalsaParser/*@bgen(jjtree)*/implements SalsaParserTreeConstants, SalsaParserConstants {/*@bgen(jjtree)*/
  protected static JJTSalsaParserState jjtree = new JJTSalsaParserState();
        public static void main(String args[]) {
            SalsaParser parser;

            if (args.length == 0) {
                System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Reading from standard input . . .");

                parser = new SalsaParser(System.in);
            } else if (args.length == 1) {
                System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Reading from file " + args[0] + " . . .");

                try {
                    parser = new SalsaParser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  File " + args[0] + " not found.");
                    return;
                }
            } else {
                System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Usage is one of:");
                System.out.println("       java SalsaParser < inputfile");
                System.out.println("OR");
                System.out.println("       java SalsaParser inputfile");
                return;
            }

            try {
                CCompilationUnit cu = parser.CompilationUnit();
                System.out.println("\u005cn\u005cnSTATE CODE:\u005cn\u005cn" + cu.getStateCode());
                System.out.println("\u005cn\u005cnREFERENCE CODE:\u005cn\u005cn" + cu.getReferenceCode());

                System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Salsa program parsed successfully.");
            } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Encountered errors during parse.");
            }
        }

        static int depth = 0;
        static String getDepth() {
            String result = "";
            for (int i = 0; i < depth; i++) result += " ";
            return result;
        }

        static void jjtreeOpenNodeScope(SimpleNode n) {
//            System.out.println(getDepth() + "Opening node: " + SalsaParserTreeConstants.jjtNodeName[n.id]);
//            depth++;
        }

        static void jjtreeCloseNodeScope(SimpleNode n) {
//            depth--;
//            System.out.println(getDepth() + "Closing node: " + SalsaParserTreeConstants.jjtNodeName[n.id]);
        }

/******************************************
 * THE SALSA LANGUAGE GRAMMAR STARTS HERE *
 ******************************************/

/*
 * Program structuring syntax follows.
 */
  static final public CCompilationUnit CompilationUnit() throws ParseException {
                                      /*@bgen(jjtree) CompilationUnit */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTCOMPILATIONUNIT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CCompilationUnit compilation_unit = new CCompilationUnit();
    CImportDeclaration import_declaration;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
        compilation_unit.module_string = ModuleDeclaration();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        import_declaration = ImportDeclaration();
          compilation_unit.import_declarations.add(import_declaration);
      }
      if (jj_2_1(2147483647)) {
        compilation_unit.behavior_declaration = BehaviorDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTERFACE:
          compilation_unit.interface_declaration = InterfaceDeclaration();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return compilation_unit;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String ModuleDeclaration() throws ParseException {
                              /*@bgen(jjtree) ModuleDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMODULEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CName module_name;
    try {
      jj_consume_token(MODULE);
      module_name = Name();
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return module_name.name;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CGenericType GenericType() throws ParseException {
                              /*@bgen(jjtree) GenericType */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTGENERICTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CGenericType generic_type;
    Token t1 = null, t2 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 113:
        t1 = jj_consume_token(113);
        jj_consume_token(EXTENDS);
        t2 = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_2(2147483647)) {
          t1 = jj_consume_token(IDENTIFIER);
          jj_consume_token(EXTENDS);
          t2 = jj_consume_token(IDENTIFIER);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            t1 = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        if (t2 == null) {
            generic_type = new CGenericType(t1.image);
            generic_type.initLineAndColumn(t1, t1);
        } else {
            generic_type = new CGenericType(t1.image, t2.image);
            generic_type.initLineAndColumn(t1, t2);
        }
        {if (true) return generic_type;}
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String GenericDeclaration(CName name) throws ParseException {
                                         /*@bgen(jjtree) GenericDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTGENERICDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CGenericType generic_type;
    Token t;
    try {
      jj_consume_token(LT);
      generic_type = GenericType();
                                                      name.generic_types.add(generic_type); name.name += "<" + generic_type.toString();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        generic_type = GenericType();
                                                      name.generic_types.add(generic_type); name.name += "," + generic_type.toString();
      }
      t = jj_consume_token(GT);
                                                      name.name += ">"; name.initLineAndColumnEnd(t);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return generic_type.toString();}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CName Name() throws ParseException {
                /*@bgen(jjtree) Name */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CName name = new CName();
    Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                                              name.name = t.image; name.initLineAndColumn(t, t);
      label_3:
      while (true) {
        if (jj_2_3(2147483647)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                              name.name += "." + t.image; name.initLineAndColumnEnd(t);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        GenericDeclaration(name);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return name;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CImportDeclaration ImportDeclaration() throws ParseException {
                                          /*@bgen(jjtree) ImportDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTIMPORTDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CImportDeclaration import_declaration = new CImportDeclaration();
    Token t;
   Token beginToken, endToken;
    try {
      beginToken = jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECT:
        jj_consume_token(OBJECT);
                      import_declaration.is_object = true;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENUM:
        jj_consume_token(ENUM);
                        import_declaration.is_enum = true;
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
                           import_declaration.import_string = t.image;
      label_4:
      while (true) {
        if (jj_2_4(2147483647)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
          import_declaration.import_string += "." + t.image;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(STAR);
               import_declaration.import_string += ".*";
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      endToken = jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      import_declaration.initLineAndColumn(beginToken, endToken);
      {if (true) return import_declaration;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CInterfaceDeclaration InterfaceDeclaration() throws ParseException {
                                                /*@bgen(jjtree) InterfaceDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTINTERFACEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CInterfaceDeclaration interface_declaration = new CInterfaceDeclaration();
    CMessageHandler message_handler;
    CLocalVariableDeclaration variable_declaration;
    Token t;
   CName name;
    try {
      jj_consume_token(INTERFACE);
      name = Name();
                                                                                      interface_declaration.interface_name = name;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        name = Name();
                                                                                      interface_declaration.extends_name = name;
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ACK:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case _TOKEN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        if (jj_2_5(2147483647)) {
          message_handler = InterfaceMessageHandlerDeclaration();
                                                                                                                            interface_declaration.message_handlers.add(message_handler);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACK:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case _TOKEN:
          case IDENTIFIER:
            variable_declaration = LocalVariableDeclaration();
            jj_consume_token(SEMICOLON);
                                                                                                                  interface_declaration.variable_declarations.add(variable_declaration);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return interface_declaration;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CBehaviorDeclaration BehaviorDeclaration() throws ParseException {
                                              /*@bgen(jjtree) BehaviorDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBEHAVIORDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CBehaviorDeclaration behavior_declaration = new CBehaviorDeclaration();
    Token t, t2;
    CName name, behavior_name;
    CConstructor constructor;
    CMessageHandler message_handler;
    CLocalVariableDeclaration variable_declaration;
    CEnumeration enumeration;
    try {
      jj_consume_token(BEHAVIOR);
      behavior_name = Name();
                                                                                                  behavior_declaration.behavior_name = behavior_name;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        name = Name();
                                                                                                  behavior_declaration.extends_name = name;
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        name = Name();
                                                                                                  behavior_declaration.implements_names.add(name);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          name = Name();
                                                                                                  behavior_declaration.implements_names.add(name);
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ACK:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case ENUM:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case _TOKEN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        if (jj_2_6(2147483647)) {
          enumeration = Enumeration();
                                                                                                  behavior_declaration.enumerations.add(enumeration);
        } else if (jj_2_7(2147483647)) {
          constructor = ConstructorDeclaration();
                                                                                                  behavior_declaration.constructors.add(constructor);
        } else if (jj_2_8(2147483647)) {
          message_handler = MessageHandlerDeclaration();
                                                                                                  behavior_declaration.message_handlers.add(message_handler);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACK:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case _TOKEN:
          case IDENTIFIER:
            variable_declaration = LocalVariableDeclaration();
            jj_consume_token(SEMICOLON);
                                                                                                  behavior_declaration.variable_declarations.add(variable_declaration);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      t2 = jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        behavior_declaration.initLineAndColumn(behavior_name, t2);
        {if (true) return behavior_declaration;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CEnumeration Enumeration() throws ParseException {
                              /*@bgen(jjtree) Enumeration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTENUMERATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CEnumeration enumeration = new CEnumeration();
    String name;
    Token t;
    try {
      jj_consume_token(ENUM);
      t = jj_consume_token(IDENTIFIER);
                                  enumeration.name = t.image;
      jj_consume_token(LBRACE);
      t = jj_consume_token(IDENTIFIER);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(IDENTIFIER);
                                      enumeration.fields.add(t.image);
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return enumeration;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CType Type() throws ParseException {
                /*@bgen(jjtree) Type */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CType type;
   CPrimitiveType primitiveType = null;
   CName name = null;
   String arraySize = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACK:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        primitiveType = PrimitiveType();
        break;
      case IDENTIFIER:
        name = Name();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                  arraySize += "[]";
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      if (primitiveType != null) {
         type = new CType(primitiveType.name + arraySize);
         type.initLineAndColumn(primitiveType);
      } else {
         type = new CType(name.name + arraySize);
         type.initLineAndColumn(name);
      }
      {if (true) return type;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CPrimitiveType PrimitiveType() throws ParseException {
                                  /*@bgen(jjtree) PrimitiveType */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTPRIMITIVETYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CPrimitiveType type;
   Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
        break;
      case BYTE:
        t = jj_consume_token(BYTE);
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
        break;
      case INT:
        t = jj_consume_token(INT);
        break;
      case LONG:
        t = jj_consume_token(LONG);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
        break;
      case ACK:
        t = jj_consume_token(ACK);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      type = new CPrimitiveType(t.image);
      type.initLineAndColumn(t);
      {if (true) return type;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CMessageHandler InterfaceMessageHandlerDeclaration() throws ParseException {
                                                        /*@bgen(jjtree) InterfaceMessageHandlerDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTINTERFACEMESSAGEHANDLERDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CMessageHandler message_handler = new CMessageHandler();
    CType pass_type;
    String name;
    Token t, t2;
    Vector<CFormalParameter> parameters;
    try {
      pass_type = Type();
      t = jj_consume_token(IDENTIFIER);
      parameters = FormalParameters();
      t2 = jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        message_handler.pass_type = pass_type;
        message_handler.name = t.image;
        message_handler.parameters = parameters;
      message_handler.initLineAndColumn(pass_type, t2);
        {if (true) return message_handler;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CMessageHandler MessageHandlerDeclaration() throws ParseException {
                                               /*@bgen(jjtree) MessageHandlerDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMESSAGEHANDLERDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CMessageHandler message_handler = new CMessageHandler();
    CType pass_type;
    String name;
    Token t;
    Vector<CFormalParameter> parameters;
    CBlock block;
    try {
      pass_type = Type();
      t = jj_consume_token(IDENTIFIER);
      parameters = FormalParameters();
      block = Block();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        message_handler.pass_type = pass_type;
        message_handler.name = t.image;
        message_handler.parameters = parameters;
        message_handler.block = block;
      message_handler.initLineAndColumn(pass_type, block);
        {if (true) return message_handler;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CConstructor ConstructorDeclaration() throws ParseException {
                                         /*@bgen(jjtree) ConstructorDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTCONSTRUCTORDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CConstructor constructor = new CConstructor();
    Token t;
    Vector<CFormalParameter> parameters;
    CBlock block;
    try {
      t = jj_consume_token(IDENTIFIER);
      parameters = FormalParameters();
      block = Block();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        constructor.name = t.image;
        constructor.parameters = parameters;
        constructor.block = block;
      constructor.initLineAndColumn(t, block);
        {if (true) return constructor;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Vector<CFormalParameter> FormalParameters() throws ParseException {
                                               /*@bgen(jjtree) FormalParameters */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFORMALPARAMETERS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Vector<CFormalParameter> parameters = new Vector<CFormalParameter>();
    CVariable variable;
    String type;
    Token t;
    CFormalParameter formal_parameter;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACK:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        formal_parameter = FormalParameter();
                                                          parameters.add(formal_parameter);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          formal_parameter = FormalParameter();
                                                          parameters.add(formal_parameter);
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return parameters;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CFormalParameter FormalParameter() throws ParseException {
                                      /*@bgen(jjtree) FormalParameter */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFORMALPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CFormalParameter formal_parameter;
    CType type;
    Token t;
    try {
      type = Type();
      t = jj_consume_token(IDENTIFIER);
                                          formal_parameter = new CFormalParameter();
                                          formal_parameter.type = type;
                                          formal_parameter.name = t.image;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      formal_parameter.initLineAndColumn(type, t);
      {if (true) return formal_parameter;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CBlock Block() throws ParseException {
                  /*@bgen(jjtree) Block */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CBlock block = new CBlock();
    CStatement statement;
    Token t1, t2;
    try {
      t1 = jj_consume_token(LBRACE);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ACK:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CASE:
        case CHAR:
        case _DEFAULT:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case PASS:
        case PARENT:
        case REFERENCE:
        case SELF:
        case SHORT:
        case SWITCH:
        case _TOKEN:
        case TRUE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case MINUS:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
        statement = Statement();
                                         block.statements.add(statement);
      }
      t2 = jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      block.initLineAndColumn(t1, t2);
      {if (true) return block;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CStatement Statement() throws ParseException {
                          /*@bgen(jjtree) Statement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CStatement statement;
    Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PASS:
        statement = PassStatement();
        break;
      case IF:
        statement = IfStatement();
        break;
      case SWITCH:
        statement = SwitchStatement();
        break;
      case LBRACE:
        statement = Block();
        break;
      case FOR:
        statement = ForStatement();
        break;
      case WHILE:
        statement = WhileStatement();
        break;
      case CASE:
        statement = CaseStatement();
        break;
      case BREAK:
        statement = BreakStatement();
        break;
      case _DEFAULT:
        statement = DefaultStatement();
        break;
      default:
        jj_la1[27] = jj_gen;
        if (jj_2_9(2147483647)) {
          statement = LabelStatement();
        } else if (jj_2_10(2147483647)) {
          statement = LocalVariableDeclaration();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 114:
            t = jj_consume_token(114);
            break;
          case SEMICOLON:
            t = jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACK:
          case FALSE:
          case NEW:
          case NULL:
          case PARENT:
          case REFERENCE:
          case SELF:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case MINUS:
            statement = StatementExpression();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 114:
              t = jj_consume_token(114);
              break;
            case SEMICOLON:
              t = jj_consume_token(SEMICOLON);
              break;
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        if (t != null && t.image.equals("@")) {
            statement.continues = true;
        } else {
            statement.continues = false;
        }
        {if (true) return statement;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CPassStatement PassStatement() throws ParseException {
                                  /*@bgen(jjtree) PassStatement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTPASSSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CPassStatement pass_statement = new CPassStatement();
    Token t = null;
    try {
      jj_consume_token(PASS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACK:
      case FALSE:
      case LATER:
      case NEW:
      case NULL:
      case PARENT:
      case REFERENCE:
      case SELF:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LATER:
          t = jj_consume_token(LATER);
          break;
        case ACK:
        case FALSE:
        case NEW:
        case NULL:
        case PARENT:
        case REFERENCE:
        case SELF:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case MINUS:
          pass_statement.expression = Expression();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
        if (t != null) {
//            System.err.println("pass statement on line " + t.beginLine + " will pass later");
            pass_statement.will_pass_later = true;
        }
        {if (true) return pass_statement;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CStatementExpression StatementExpression() throws ParseException {
                                              /*@bgen(jjtree) StatementExpression */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSTATEMENTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CStatementExpression statement_expression = new CStatementExpression();
    try {
      statement_expression.expression = Expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return statement_expression;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLocalVariableDeclaration ForInit() throws ParseException {
                                       /*@bgen(jjtree) ForInit */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFORINIT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLocalVariableDeclaration local_variable_declaration = new CLocalVariableDeclaration();
    CType type;
    CVariableInit variable_init;
    try {
      type = Type();
                                                      local_variable_declaration.type = type;
      variable_init = VariableInitialization();
                                                      local_variable_declaration.variables.add(variable_init);
      label_12:
      while (true) {
        if (jj_2_11(2147483647)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(COMMA);
        variable_init = VariableInitialization();
                                                      local_variable_declaration.variables.add(variable_init);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return local_variable_declaration;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CForStatement ForStatement() throws ParseException {
                                /*@bgen(jjtree) ForStatement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFORSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CForStatement for_statement = new CForStatement();
    CExpression init, increment;
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACK:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case PARENT:
      case REFERENCE:
      case SELF:
      case SHORT:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        if (jj_2_13(2147483647)) {
          for_statement.init = ForInit();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACK:
          case FALSE:
          case NEW:
          case NULL:
          case PARENT:
          case REFERENCE:
          case SELF:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case MINUS:
            init = Expression();
                                                             for_statement.expression_inits.add(init);
            label_13:
            while (true) {
              if (jj_2_12(2147483647)) {
                ;
              } else {
                break label_13;
              }
              jj_consume_token(COMMA);
              init = Expression();
                                                                        for_statement.expression_inits.add(init);
            }
            break;
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      for_statement.conditional = Expression();
      jj_consume_token(SEMICOLON);
      increment = Expression();
                                                              for_statement.increment_expressions.add(increment);
      label_14:
      while (true) {
        if (jj_2_14(2147483647)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(COMMA);
        increment = Expression();
                                                                         for_statement.increment_expressions.add(increment);
      }
      jj_consume_token(RPAREN);
      for_statement.statement = Statement();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return for_statement;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CWhileStatement WhileStatement() throws ParseException {
                                    /*@bgen(jjtree) WhileStatement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTWHILESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CWhileStatement while_statement = new CWhileStatement();
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      while_statement.conditional = Expression();
      jj_consume_token(RPAREN);
      while_statement.block = Block();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return while_statement;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CIfStatement IfStatement() throws ParseException {
                              /*@bgen(jjtree) IfStatement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTIFSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CIfStatement if_statement = new CIfStatement();
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      if_statement.expression = Expression();
      jj_consume_token(RPAREN);
      if_statement.statement = Statement();
      if (jj_2_15(2147483647)) {
        jj_consume_token(ELSE);
        if_statement.else_statement = Statement();
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return if_statement;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CSwitchStatement SwitchStatement() throws ParseException {
                                      /*@bgen(jjtree) SwitchStatement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSWITCHSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CSwitchStatement switch_statement = new CSwitchStatement();
    CExpression expression;
    CStatement statement;
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      expression = Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
                                                                switch_statement.expression = expression;
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ACK:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CASE:
        case CHAR:
        case _DEFAULT:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case PASS:
        case PARENT:
        case REFERENCE:
        case SELF:
        case SHORT:
        case SWITCH:
        case _TOKEN:
        case TRUE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case MINUS:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_15;
        }
        statement = Statement();
                                                     switch_statement.statements.add(statement);
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return switch_statement;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CCaseStatement CaseStatement() throws ParseException {
                                  /*@bgen(jjtree) CaseStatement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTCASESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CCaseStatement case_statement = new CCaseStatement();
    CExpression expression;
    try {
      jj_consume_token(CASE);
      expression = Expression();
      jj_consume_token(COLON);
                                                          case_statement.expression = expression;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return case_statement;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CDefaultStatement DefaultStatement() throws ParseException {
                                        /*@bgen(jjtree) DefaultStatement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTDEFAULTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CDefaultStatement default_statement = new CDefaultStatement();
    try {
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return default_statement;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLabelStatement LabelStatement() throws ParseException {
                                    /*@bgen(jjtree) LabelStatement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTLABELSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLabelStatement label_statement = new CLabelStatement();
    Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
                                                  label_statement.label = t.image;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return label_statement;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CBreakStatement BreakStatement() throws ParseException {
                                    /*@bgen(jjtree) BreakStatement */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBREAKSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CBreakStatement break_statement = new CBreakStatement();
    try {
      jj_consume_token(BREAK);
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return break_statement;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLocalVariableDeclaration LocalVariableDeclaration() throws ParseException {
                                                        /*@bgen(jjtree) LocalVariableDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTLOCALVARIABLEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLocalVariableDeclaration local_variable_declaration = new CLocalVariableDeclaration();
    CType type;
    CVariableInit variable_init;
   Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _TOKEN:
        t = jj_consume_token(_TOKEN);
                                                      local_variable_declaration.is_token = true;
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      type = Type();
                                                      local_variable_declaration.type = type;
      variable_init = VariableInitialization();
                                                      local_variable_declaration.variables.add(variable_init);
      label_16:
      while (true) {
        if (jj_2_16(2147483647)) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(COMMA);
        variable_init = VariableInitialization();
                                                      local_variable_declaration.variables.add(variable_init);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      if (t != null) local_variable_declaration.initLineAndColumn(t);
      else local_variable_declaration.initLineAndColumn(type);

      {if (true) return local_variable_declaration;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CVariableInit VariableInitialization() throws ParseException {
                                          /*@bgen(jjtree) VariableInitialization */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTVARIABLEINITIALIZATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    CVariableInit variable_init = new CVariableInit();
    CExpression expression;
    try {
      t = jj_consume_token(IDENTIFIER);
                                          variable_init.name = t.image;
      if (jj_2_17(2147483647)) {
        jj_consume_token(ASSIGN);
        expression = Expression();
                                                          variable_init.expression = expression;
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      variable_init.initLineAndColumn(t);
      {if (true) return variable_init;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CArrayInit ArrayInitialization() throws ParseException {
                                    /*@bgen(jjtree) ArrayInitialization */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTARRAYINITIALIZATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CArrayInit array_init = new CArrayInit();
    CArrayInit sub_array_init;
    CExpression init;
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACK:
      case FALSE:
      case NEW:
      case NULL:
      case PARENT:
      case REFERENCE:
      case SELF:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          sub_array_init = ArrayInitialization();
                                                              array_init.inits.add(sub_array_init);
          break;
        case ACK:
        case FALSE:
        case NEW:
        case NULL:
        case PARENT:
        case REFERENCE:
        case SELF:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case MINUS:
          init = Expression();
                                                              array_init.inits.add(init);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            sub_array_init = ArrayInitialization();
                                                              array_init.inits.add(sub_array_init);
            break;
          case ACK:
          case FALSE:
          case NEW:
          case NULL:
          case PARENT:
          case REFERENCE:
          case SELF:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case MINUS:
            init = Expression();
                                                              array_init.inits.add(init);
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return array_init;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CExpression Expression() throws ParseException {
                            /*@bgen(jjtree) Expression */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CExpression expression = new CExpression();
    Token t1 = null, t2 = null;
    Vector<String> prefixes = new Vector<String>();
    Vector<Object> suffixes = new Vector<Object>();
    String type;
    try {
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case MINUS:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          t1 = jj_consume_token(INCR);
                                                     prefixes.add(t1.image);
          break;
        case DECR:
          t1 = jj_consume_token(DECR);
                                                     prefixes.add(t1.image);
          break;
        case BANG:
          t1 = jj_consume_token(BANG);
                                                    prefixes.add(t1.image);
          break;
        case MINUS:
          t1 = jj_consume_token(MINUS);
                                                    prefixes.add(t1.image);
          break;
        case TILDE:
          t1 = jj_consume_token(TILDE);
                                                    prefixes.add(t1.image);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      expression.value = Value();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
        case DECR:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_19;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          t2 = jj_consume_token(INCR);
                                                     suffixes.add(t2.image);
          break;
        case DECR:
          t2 = jj_consume_token(DECR);
                                                     suffixes.add(t2.image);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
      case ASSIGN:
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NE:
      case SC_OR:
      case SC_AND:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case BIT_AND:
      case BIT_OR:
      case XOR:
      case REM:
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          expression.operator = AssignmentOperator();
          break;
        case INSTANCEOF:
        case GT:
        case LT:
        case EQ:
        case LE:
        case GE:
        case NE:
        case SC_OR:
        case SC_AND:
        case PLUS:
        case MINUS:
        case STAR:
        case SLASH:
        case BIT_AND:
        case BIT_OR:
        case XOR:
        case REM:
        case LSHIFT:
        case RSIGNEDSHIFT:
        case RUNSIGNEDSHIFT:
          expression.operator = Operator();
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression.operator_expression = Expression();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      expression.initLineAndColumn(expression.value);
      if (t1 != null) {
         expression.initLineAndColumnBegin(t1);
      }
      if (t2 != null) {
         expression.initLineAndColumnEnd(t2);
      }

        expression.suffixes = suffixes;
        expression.prefixes = prefixes;
        {if (true) return expression;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CValue Value() throws ParseException {
                  /*@bgen(jjtree) Value */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CValue value = new CValue();
    CAllocation allocation;
    CExpression expression;
    CMessageSend message_send;
   CMethodInvocation method_invocation;
   CFieldAccess field_access;
    CType type;
   CVariableName variableName;
    Token t, t2;
   Token beginToken, endToken;
   boolean hasBegin = false;
    try {
      if (jj_2_18(2147483647)) {
        beginToken = jj_consume_token(LPAREN);
        type = Type();
        jj_consume_token(RPAREN);
                                                                         value.cast_type = type; value.initLineAndColumnBegin(beginToken); hasBegin = true;
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACK:
      case FALSE:
      case NULL:
      case PARENT:
      case SELF:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        value.literal = Literal();
                                                                    value.initLineAndColumnEnd( value.literal );                          if (!hasBegin) value.initLineAndColumnBegin( value.literal );
        break;
      case IDENTIFIER:
        variableName = VariableName();
                                                                   value.variable_name = variableName; value.initLineAndColumnEnd(variableName); if (!hasBegin) value.initLineAndColumnBegin(variableName);
        break;
      case LPAREN:
        beginToken = jj_consume_token(LPAREN);
        expression = Expression();
        endToken = jj_consume_token(RPAREN);
                                                                            value.expression = expression; value.initLineAndColumnEnd(endToken);        if (!hasBegin) value.initLineAndColumnBegin(beginToken);
        break;
      case NEW:
      case REFERENCE:
        allocation = Allocation();
                                                                           value.allocation = allocation; value.initLineAndColumnEnd(allocation);      if (!hasBegin) value.initLineAndColumnBegin(allocation);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case DOT:
        case MSG:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_20;
        }
        if (jj_2_19(2147483647)) {
          t = jj_consume_token(LBRACKET);
          expression = Expression();
          t2 = jj_consume_token(RBRACKET);
                                                            CArrayAccess array_access = new CArrayAccess(expression);
                                                            array_access.initLineAndColumn(t, t2);
                                                            value.modifications.add(array_access);
                                                            if (System.getProperty("debugValue") != null) System.out.println("In CValue, adding array access");
                                                            value.initLineAndColumnEnd(t2);
        } else if (jj_2_20(2147483647)) {
          message_send = MessageSend();
                                                                   value.modifications.add(message_send); value.initLineAndColumnEnd(message_send);
        } else if (jj_2_21(2147483647)) {
          method_invocation = MethodInvocation();
                                                                     value.modifications.add(method_invocation); value.initLineAndColumnEnd(method_invocation);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            field_access = FieldAccess();
                                                                   value.modifications.add(field_access); value.initLineAndColumnEnd(field_access);
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return value;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CVariableName VariableName() throws ParseException {
                                /*@bgen(jjtree) VariableName */
   SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTVARIABLENAME);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));CVariableName variableName = new CVariableName();
   Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      variableName.name = t.image;
      variableName.initLineAndColumn(t);
      {if (true) return variableName;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CFieldAccess FieldAccess() throws ParseException {
                              /*@bgen(jjtree) FieldAccess */
   SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFIELDACCESS);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));CFieldAccess field_access = new CFieldAccess();
   Token t, t1;
    try {
      t1 = jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                                                         field_access.name = t.image;
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      field_access.initLineAndColumn(t1, t);
      {if (true) return field_access;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CMethodInvocation MethodInvocation() throws ParseException {
                                        /*@bgen(jjtree) MethodInvocation */
   SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMETHODINVOCATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));CMethodInvocation method_invocation = new CMethodInvocation();
   CArguments arguments;
   Token t, invoket;
    try {
      invoket = jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                                      if (System.getProperty("debugMethodInvocation") != null) System.out.println("in method invocation, identifier = " + t.image);
      arguments = Arguments();
                                 method_invocation.method_name = t.image;
                                 method_invocation.arguments = arguments.arguments;
                                 method_invocation.initLineAndColumn(invoket, arguments);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
     {if (true) return method_invocation;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CMessageSend MessageSend() throws ParseException {
                              /*@bgen(jjtree) MessageSend */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMESSAGESEND);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CMessageSend message_send = new CMessageSend();
    CMessageProperty message_property;
    CArguments arguments;
    Token t, invoket;
    try {
      invoket = jj_consume_token(MSG);
      t = jj_consume_token(IDENTIFIER);
      arguments = Arguments();
                                 message_send.message_name = t.image;
                                 message_send.arguments = arguments. arguments;
                                 message_send.initLineAndColumn(invoket, arguments);
      if (jj_2_22(2147483647)) {
        message_property = MessageProperty();
                                                   message_send.message_property = message_property;
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return message_send;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CMessageProperty MessageProperty() throws ParseException {
                                      /*@bgen(jjtree) MessageProperty */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMESSAGEPROPERTY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CMessageProperty message_property = new CMessageProperty();
    CArguments arguments;
    try {
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELAY:
        jj_consume_token(DELAY);
                                    message_property.name = "delay";
        break;
      case WAITFOR:
        jj_consume_token(WAITFOR);
                                     message_property.name = "waitfor";
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arguments = Arguments();
                                             message_property.arguments = arguments.arguments;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return message_property;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CArguments Arguments() throws ParseException {
                          /*@bgen(jjtree) Arguments */
   SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTARGUMENTS);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));CArguments arguments = new CArguments();
    CExpression expression;
   Token t1, t2;
    try {
      t1 = jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACK:
      case FALSE:
      case NEW:
      case NULL:
      case PARENT:
      case REFERENCE:
      case SELF:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        expression = Expression();
                                           arguments.arguments.add(expression);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_21;
          }
          jj_consume_token(COMMA);
          expression = Expression();
                                           arguments.arguments.add(expression);
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      t2 = jj_consume_token(RPAREN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      arguments.initLineAndColumn(t1, t2);
      {if (true) return arguments;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CAllocation Allocation() throws ParseException {
                            /*@bgen(jjtree) Allocation */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTALLOCATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CAllocation allocation = new CAllocation();
    CArguments arguments;
    CName type;
    CPrimitiveType ptype;
    Token t;
    try {
      if (jj_2_23(2147483647)) {
        t = jj_consume_token(NEW);
        type = Name();
        arguments = Arguments();
                                                      allocation.arguments = arguments.arguments;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
          BindDeclaration(allocation);
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
                                                      allocation.type = type;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          t = jj_consume_token(NEW);
                                                      allocation.initLineAndColumn(t);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACK:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
            ptype = PrimitiveType();
                                                      allocation.type = ptype;
            break;
          case IDENTIFIER:
            type = Name();
                                                      allocation.type = type;
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          ArrayDimsAndInits(allocation);
          break;
        case REFERENCE:
          t = jj_consume_token(REFERENCE);
                                                      allocation.remote_reference = true;
          type = Name();
          BindDeclaration(allocation);
                                                      allocation.type = type;
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      allocation.initLineAndColumnBegin(t);
      {if (true) return allocation;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void BindDeclaration(CAllocation allocation) throws ParseException {
                                                /*@bgen(jjtree) BindDeclaration */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBINDDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CExpression expression;
    try {
      jj_consume_token(AT);
      jj_consume_token(LPAREN);
      expression = Expression();
                                           allocation.first_expression = expression;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        expression = Expression();
                                               allocation.second_expression = expression;
        jj_consume_token(COMMA);
        expression = Expression();
                                               allocation.third_expression = expression;
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void ArrayDimsAndInits(CAllocation allocation) throws ParseException {
                                                  /*@bgen(jjtree) ArrayDimsAndInits */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTARRAYDIMSANDINITS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CExpression expression;
    try {
      if (jj_2_28(2147483647)) {
        label_22:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                             allocation.array_dimensions++;
          if (jj_2_24(2147483647)) {
            ;
          } else {
            break label_22;
          }
        }
        if (jj_2_25(2147483647)) {
          allocation.array_init = ArrayInitialization();
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
                                      allocation.array_arguments = new Vector<CExpression>();
          label_23:
          while (true) {
            jj_consume_token(LBRACKET);
            expression = Expression();
            jj_consume_token(RBRACKET);
                                        allocation.array_arguments.add(expression);
                                        allocation.array_dimensions++;
            if (jj_2_26(2147483647)) {
              ;
            } else {
              break label_23;
            }
          }
          label_24:
          while (true) {
            if (jj_2_27(2147483647)) {
              ;
            } else {
              break label_24;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
                                             allocation.array_dimensions++;
          }
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public CLiteral Literal() throws ParseException {
                      /*@bgen(jjtree) Literal */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELF:
        literal = SelfLiteral();
        break;
      case PARENT:
        literal = ParentLiteral();
        break;
      case INTEGER_LITERAL:
        literal = IntegerLiteral();
        break;
      case FLOATING_POINT_LITERAL:
        literal = FloatingPointLiteral();
        break;
      case CHARACTER_LITERAL:
        literal = CharacterLiteral();
        break;
      case STRING_LITERAL:
        literal = StringLiteral();
        break;
      case FALSE:
      case TRUE:
        literal = BooleanLiteral();
        break;
      case NULL:
        literal = NullLiteral();
        break;
      case ACK:
        literal = AcknowledgementLiteral();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return literal;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLiteral SelfLiteral() throws ParseException {
                          /*@bgen(jjtree) SelfLiteral */
   SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSELFLITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal = new CLiteral();
   literal.type = "self";
   Token t;
    try {
      t = jj_consume_token(SELF);
                                   literal.value = "self";
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      literal.initLineAndColumn(t);
      {if (true) return literal;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLiteral ParentLiteral() throws ParseException {
                            /*@bgen(jjtree) ParentLiteral */
   SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTPARENTLITERAL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal = new CLiteral();
   literal.type = "parent";
   Token t;
    try {
      t = jj_consume_token(PARENT);
                                     literal.value = "parent";
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      literal.initLineAndColumn(t);
      {if (true) return literal;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLiteral IntegerLiteral() throws ParseException {
                             /*@bgen(jjtree) IntegerLiteral */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTINTEGERLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal = new CLiteral();
    literal.type = "int";
    Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
                                        literal.value = t.image;
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      literal.initLineAndColumn(t);
       {if (true) return literal;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLiteral FloatingPointLiteral() throws ParseException {
                                   /*@bgen(jjtree) FloatingPointLiteral */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFLOATINGPOINTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal = new CLiteral();
    literal.type = "double";
    Token t;
    try {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                          literal.value = t.image;
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      literal.initLineAndColumn(t);
       {if (true) return literal;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLiteral CharacterLiteral() throws ParseException {
                               /*@bgen(jjtree) CharacterLiteral */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTCHARACTERLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal = new CLiteral();
    literal.type = "char";
    Token t;
    try {
      t = jj_consume_token(CHARACTER_LITERAL);
                                         literal.value = t.image;
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      literal.initLineAndColumn(t);
       {if (true) return literal;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLiteral StringLiteral() throws ParseException {
                            /*@bgen(jjtree) StringLiteral */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSTRINGLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal = new CLiteral();
    literal.type = "String";
    Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
                                      literal.value = t.image;
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      literal.initLineAndColumn(t);
      {if (true) return literal;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLiteral BooleanLiteral() throws ParseException {
                             /*@bgen(jjtree) BooleanLiteral */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBOOLEANLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal = new CLiteral();
    literal.type = "boolean";
    Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                           literal.value = t.image;
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      literal.initLineAndColumn(t);
       {if (true) return literal;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLiteral NullLiteral() throws ParseException {
                          /*@bgen(jjtree) NullLiteral */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTNULLLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal = new CLiteral();
    literal.type = "null";
   Token t;
    try {
      t = jj_consume_token(NULL);
                                    literal.value = "null";
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      literal.initLineAndColumn(t);
       {if (true) return literal;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public CLiteral AcknowledgementLiteral() throws ParseException {
                                     /*@bgen(jjtree) AcknowledgementLiteral */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTACKNOWLEDGEMENTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));CLiteral literal = new CLiteral();
    literal.type = "ack";
   Token t;
    try {
      t = jj_consume_token(ACK);
                                   literal.value = "ack";
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
     jjtn000.jjtSetLastToken(getToken(0));
      literal.initLineAndColumn(t);
       {if (true) return literal;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String AssignmentOperator() throws ParseException {
                               /*@bgen(jjtree) AssignmentOperator */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTASSIGNMENTOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        t = jj_consume_token(ASSIGN);
        break;
      case STARASSIGN:
        t = jj_consume_token(STARASSIGN);
        break;
      case SLASHASSIGN:
        t = jj_consume_token(SLASHASSIGN);
        break;
      case REMASSIGN:
        t = jj_consume_token(REMASSIGN);
        break;
      case PLUSASSIGN:
        t = jj_consume_token(PLUSASSIGN);
        break;
      case MINUSASSIGN:
        t = jj_consume_token(MINUSASSIGN);
        break;
      case LSHIFTASSIGN:
        t = jj_consume_token(LSHIFTASSIGN);
        break;
      case RSIGNEDSHIFTASSIGN:
        t = jj_consume_token(RSIGNEDSHIFTASSIGN);
        break;
      case RUNSIGNEDSHIFTASSIGN:
        t = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
        break;
      case ANDASSIGN:
        t = jj_consume_token(ANDASSIGN);
        break;
      case XORASSIGN:
        t = jj_consume_token(XORASSIGN);
        break;
      case ORASSIGN:
        t = jj_consume_token(ORASSIGN);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Operator() throws ParseException {
                     /*@bgen(jjtree) Operator */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        t = jj_consume_token(SC_OR);
        break;
      case SC_AND:
        t = jj_consume_token(SC_AND);
        break;
      case BIT_OR:
        t = jj_consume_token(BIT_OR);
        break;
      case XOR:
        t = jj_consume_token(XOR);
        break;
      case BIT_AND:
        t = jj_consume_token(BIT_AND);
        break;
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LT:
        t = jj_consume_token(LT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case LSHIFT:
        t = jj_consume_token(LSHIFT);
        break;
      case RSIGNEDSHIFT:
        t = jj_consume_token(RSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFT:
        t = jj_consume_token(RUNSIGNEDSHIFT);
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case REM:
        t = jj_consume_token(REM);
        break;
      case INSTANCEOF:
        t = jj_consume_token(INSTANCEOF);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EXTENDS)) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_116() {
    Token xsp;
    if (jj_3R_122()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_122()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(113)) return true;
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_115() {
    Token xsp;
    if (jj_3R_120()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(BEHAVIOR)) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  static private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_25()) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(REFERENCE)) return true;
    if (jj_3R_28()) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(ACK)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_41()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_28()) return true;
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(ENUM)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_119()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_scan_token(WAITFOR)) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(DELAY)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(MSG)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(PARENT)) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(MSG)) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(SELF)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SalsaParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x10000000,0x41152000,0x41152000,0x10000000,0x0,0x0,0x43152000,0x41152000,0x0,0x41152000,0x0,0x41152000,0x0,0x41152000,0xe15f2000,0x0,0x0,0x804a0000,0x20002000,0x20002000,0x20002000,0x20002000,0x61152000,0xe15f2000,0x0,0x20002000,0x0,0x20002000,0x20002000,0x0,0x0,0x0,0x0,0x0,0x0,0x20002000,0x0,0x0,0x800000,0x0,0x20002000,0x4000,0x41152000,0x0,0x0,0x0,0x20002000,0x20000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200,0x4,0x20,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x140090,0x140090,0x0,0x0,0x2,0x140090,0x140090,0x0,0x40090,0x0,0x40090,0x0,0x40090,0xd1bf6c91,0x0,0x0,0x882001,0xd1234c00,0xd1234c40,0xd1234c40,0xd1234c00,0xd1274c90,0xd1bf6c91,0x100000,0xd1234c00,0x0,0xd1234c00,0xd1234c00,0x0,0x0,0x0,0x0,0x8,0x8,0xd1234c00,0x0,0x0,0x400000,0x0,0xd1234c00,0x0,0x40090,0x10400,0x0,0x0,0xd1224800,0x200000,0x0,0x8,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x1,0x400,0x8000,0x0,0x0,0x800,0x0,0x1,0x1,0x0,0x400,0x0,0x1,0x1,0x400,0x1,0x80,0x0,0x400,0x1,0x16030029,0x200,0x200,0x20,0x16030009,0x16030009,0x16030009,0x16030009,0x16030009,0x16030029,0x0,0x16030029,0x400,0x16030029,0x16030029,0x16030000,0x16030000,0x6000000,0x6000000,0xf9f8e000,0xf9f8e000,0x9,0x1880,0x800,0x0,0x400,0x16030009,0x0,0x1,0x0,0x400,0x80,0x0,0x0,0x2000,0xf9f8c000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1ffff,0x1ffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1ffc0,0x3f,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[28];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SalsaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SalsaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SalsaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SalsaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SalsaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SalsaParser(SalsaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SalsaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[115];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 115; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 28; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
