/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Salsa0.2.3.jj */
/*@egen*//*
	Salsa 2.1 Grammar
	
	Authors: Carlos Varela, Travis Desell
 */

options {
	JAVA_UNICODE_ESCAPE = true;
	                    
	                       
	                    
	                                     
}

PARSER_BEGIN(SalsaParser)
	package salsa_lite.compiler;

	import salsa_lite.compiler.definitions.*;

	import java.util.Vector;
    import java.util.LinkedList;

	public class SalsaParser/*@bgen(jjtree)*/implements SalsaParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTSalsaParserState jjtree = new JJTSalsaParserState();

/*@egen*/

		public static void main(String args[]) {
			SalsaParser parser;

			if (args.length == 0) {
				System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Reading from standard input . . .");

				parser = new SalsaParser(System.in);
			} else if (args.length == 1) {
				System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Reading from file " + args[0] + " . . .");

				try {
					parser = new SalsaParser(new java.io.FileInputStream(args[0]));
				} catch (java.io.FileNotFoundException e) {
					System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  File " + args[0] + " not found.");
					return;
				}
			} else {
				System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Usage is one of:");
				System.out.println("         java SalsaParser < inputfile");
				System.out.println("OR");
				System.out.println("         java SalsaParser inputfile");
				return;
			}

			try {
				CCompilationUnit cu = parser.CompilationUnit();
				System.out.println("\n\nSTATE CODE:\n\n" + cu.getStateCode());
				System.out.println("\n\nREFERENCE CODE:\n\n" + cu.getReferenceCode());
				
				System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Salsa program parsed successfully.");
			} catch (ParseException e) {
				System.out.println(e.getMessage());
				System.out.println("Salsa Parser Version " + SalsaCompiler.VERSION + ":  Encountered errors during parse.");
			}
		}

		static int depth = 0;
		static String getDepth() {
			String result = "";
			for (int i = 0; i < depth; i++) result += " ";
			return result;
		}

		static void jjtreeOpenNodeScope(SimpleNode n) {
//			System.out.println(getDepth() + "Opening node: " + SalsaParserTreeConstants.jjtNodeName[n.id]);
//			depth++;
		}

		static void jjtreeCloseNodeScope(SimpleNode n) {
//			depth--;
//			System.out.println(getDepth() + "Closing node: " + SalsaParserTreeConstants.jjtNodeName[n.id]);
		}
	}
PARSER_END(SalsaParser)


/* WHITE SPACE */

SKIP : {
	" " | "\t" | "\n" | "\r" | "\f"
}

/* COMMENTS */

MORE : {
	  "//" : IN_SINGLE_LINE_COMMENT
	| <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
	| "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN : {
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT> SPECIAL_TOKEN : {
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN : {
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT> MORE : {
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN : {
	  < ACK: "ack" >
	| < AT: "at" >
	| < BEHAVIOR: "behavior" >
	| < BOOLEAN: "boolean" >
	| < BREAK: "break" >
	| < BYTE: "byte" >
	| < CASE: "case" >
	| < CHAR: "char" >
	| < CONST: "const" >
	| < _DEFAULT: "default" >
	| < DELAY: "delay" >
	| < DOUBLE: "double" >
	| < ENUM: "enum" >
	| < ELSE: "else" >
	| < ENDIF: "endif" >
	| < EXTENDS: "extends" >
	| < FALSE: "false" >
	| < FLOAT: "float" >
    | < FOR: "for" >
	| < IF: "if" >
	| < IMPLEMENTS: "implements" >
	| < IMPORT: "import" >
	| < INSTANCEOF: "instanceof" >
	| < INT: "int" >
	| < INTERFACE: "interface" >
	| < LATER: "later" >
	| < LONG: "long" >
	| < LOOP: "loop" >
	| < MODULE: "module">
	| < NEW: "new" >
	| < NULL: "null" >
	| < OBJECT: "object" >
	| < PASS: "pass" >
	| < PARENT: "parent" >
	| < PUBLIC: "public" >
	| < REFERENCE: "reference" >
	| < SELF: "self" >
	| < SHORT: "short" >
	| < SWITCH: "switch" >
	| < _TOKEN: "token" >
	| < TRUE: "true" >
	| < WAITFOR: "waitfor" >
    | < WHILE: "while" >
}

/* LITERALS */

TOKEN : {
	  < INTEGER_LITERAL:
		  <DECIMAL_LITERAL> (["l","L"])?
		| <HEX_LITERAL> (["l","L"])?
		| <OCTAL_LITERAL> (["l","L"])?
	  >
	| < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
	| < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
	| < #OCTAL_LITERAL: "0" (["0"-"7"])* >
	| < FLOATING_POINT_LITERAL:
		  (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
		| "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
		| (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
		| (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
	  >
	| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	| < CHARACTER_LITERAL:
		"'"
		(   (~["'","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0"-"7"] ( ["0"-"7"] )?
            	| ["0"-"3"] ["0"-"7"] ["0"-"7"]
			    )
			  )
		)
		"'"
	  >
	| < STRING_LITERAL:
		"\""
		(   (~["\"","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0"-"7"] ( ["0"-"7"] )?
				| ["0"-"3"] ["0"-"7"] ["0"-"7"]
				)
			  )
		)*
		"\""
	  >
}

/* IDENTIFIERS */

TOKEN : {
	  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
	| < #LETTER:
		[
			"$",
			"A"-"Z",
			"_",
			"a"-"z",
			"\u00c0"-"\u00d6",
			"\u00d8"-"\u00f6",
			"\u00f8"-"\u00ff",
			"\u0100"-"\u1fff",
			"\u3040"-"\u318f",
			"\u3300"-"\u337f",
			"\u3400"-"\u3d2d",
			"\u4e00"-"\u9fff",
			"\uf900"-"\ufaff"
		]
	  >
	| < #DIGIT:
		[
			"0"-"9",
			"\u0660"-"\u0669",
			"\u06f0"-"\u06f9",
			"\u0966"-"\u096f",
			"\u09e6"-"\u09ef",
			"\u0a66"-"\u0a6f",
			"\u0ae6"-"\u0aef",
			"\u0b66"-"\u0b6f",
			"\u0be7"-"\u0bef",
			"\u0c66"-"\u0c6f",
			"\u0ce6"-"\u0cef",
			"\u0d66"-"\u0d6f",
			"\u0e50"-"\u0e59",
			"\u0ed0"-"\u0ed9",
			"\u1040"-"\u1049"
		]
	  >
}

/* SEPARATORS */

TOKEN : {
	  < LPAREN: "(" >
	| < RPAREN: ")" >
	| < LBRACE: "{" >
	| < RBRACE: "}" >
	| < LBRACKET: "[" >
	| < RBRACKET: "]" >
	| < SEMICOLON: ";" >
	| < COMMA: "," >
	| < DOT: "." >
	| < MSG: "<-" >
}

/* OPERATORS */

TOKEN : {
	  < ASSIGN: "=" >
	| < GT: ">" >
	| < LT: "<" >
	| < BANG: "!" >
	| < TILDE: "~" >
	| < COLON: ":" >
	| < EQ: "==" >
	| < LE: "<=" >
	| < GE: ">=" >
	| < NE: "!=" >
	| < SC_OR: "||" >
	| < SC_AND: "&&" >
	| < INCR: "++" >
	| < DECR: "--" >
	| < PLUS: "+" >
	| < MINUS: "-" >
	| < STAR: "*" >
	| < SLASH: "/" >
	| < BIT_AND: "&" >
	| < BIT_OR: "|" >
	| < XOR: "^" >
	| < REM: "%" >
	| < LSHIFT: "<<" >
	| < RSIGNEDSHIFT: ">>" >
	| < RUNSIGNEDSHIFT: ">>>" >
	| < PLUSASSIGN: "+=" >
	| < MINUSASSIGN: "-=" >
	| < STARASSIGN: "*=" >
	| < SLASHASSIGN: "/=" >
	| < ANDASSIGN: "&=" >
	| < ORASSIGN: "|=" >
	| < XORASSIGN: "^=" >
	| < REMASSIGN: "%=" >
	| < LSHIFTASSIGN: "<<=" >
	| < RSIGNEDSHIFTASSIGN: ">>=" >
	| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/******************************************
 * THE SALSA LANGUAGE GRAMMAR STARTS HERE *
 ******************************************/

/*
 * Program structuring syntax follows.
 */
 
CCompilationUnit CompilationUnit() : {/*@bgen(jjtree) CompilationUnit */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTCOMPILATIONUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CCompilationUnit compilation_unit = new CCompilationUnit();
	CImportDeclaration import_declaration; 
} {/*@bgen(jjtree) CompilationUnit */
        try {
/*@egen*/
	[compilation_unit.module_string = ModuleDeclaration()]
	(
		import_declaration = ImportDeclaration()
		{ compilation_unit.import_declarations.add(import_declaration); }
	)* 

	(LOOKAHEAD("behavior") compilation_unit.behavior_declaration = BehaviorDeclaration() | compilation_unit.interface_declaration = InterfaceDeclaration() )
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	
	{ 
		return compilation_unit; 
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String ModuleDeclaration() : {/*@bgen(jjtree) ModuleDeclaration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMODULEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CName module_name;
} {/*@bgen(jjtree) ModuleDeclaration */
        try {
/*@egen*/
	"module" module_name = Name() ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return module_name.name; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CName Name() : {/*@bgen(jjtree) Name */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CName name = new CName();
	Token t;
} {/*@bgen(jjtree) Name */
        try {
/*@egen*/
	t = <IDENTIFIER>
    {
        name.initLineAndColumn(t);
        name.name = t.image;
    }

	(
		LOOKAHEAD(".") "."
		t = <IDENTIFIER>
		{ name.name += "." + t.image; }
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return name; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CImportDeclaration ImportDeclaration() : {/*@bgen(jjtree) ImportDeclaration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTIMPORTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CImportDeclaration import_declaration = new CImportDeclaration();
	Token t;
    Token beginToken, endToken;
} {/*@bgen(jjtree) ImportDeclaration */
        try {
/*@egen*/
	beginToken = "import"
	[
		"object"	{ import_declaration.is_object = true; }
	] 
	[
		"enum"		{ import_declaration.is_enum = true; }
	]
	t = <IDENTIFIER> 	{ import_declaration.import_string = t.image; }

	(
		LOOKAHEAD(".") "." t = <IDENTIFIER>
		{ import_declaration.import_string += "." + t.image; }
	)*
	["." "*" { import_declaration.import_string += ".*"; } ] endToken = ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ 
        import_declaration.initLineAndColumn(beginToken, endToken);
        return import_declaration; 
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
 
CInterfaceDeclaration InterfaceDeclaration() : {/*@bgen(jjtree) InterfaceDeclaration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTINTERFACEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CInterfaceDeclaration interface_declaration = new CInterfaceDeclaration();
	CMessageHandler message_handler;
	CLocalVariableDeclaration variable_declaration;
	Token t;
    CName name;
} {/*@bgen(jjtree) InterfaceDeclaration */
        try {
/*@egen*/
	"interface" t = <IDENTIFIER>													{ interface_declaration.interface_name = t.image; }
	["extends" name = Name()                                                        { interface_declaration.extends_name = name.name; } ]
	"{"
		(
			  LOOKAHEAD(Type() <IDENTIFIER> FormalParameters()) message_handler = InterfaceMessageHandlerDeclaration()	{ interface_declaration.message_handlers.add(message_handler); }
			| variable_declaration = LocalVariableDeclaration() ";"          				                            { interface_declaration.variable_declarations.add(variable_declaration); }
		)*
	"}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return interface_declaration; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CBehaviorDeclaration BehaviorDeclaration() : {/*@bgen(jjtree) BehaviorDeclaration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBEHAVIORDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CBehaviorDeclaration behavior_declaration = new CBehaviorDeclaration();
	Token t, t2;
	CName name;
	CConstructor constructor;
	CMessageHandler message_handler;
	CLocalVariableDeclaration variable_declaration;
	CEnumeration enumeration;
} {/*@bgen(jjtree) BehaviorDeclaration */
        try {
/*@egen*/
	"behavior" t = <IDENTIFIER>													{ behavior_declaration.behavior_name = t.image; }
	[
		"extends" name = Name() 												{ behavior_declaration.extends_name = name.name; }
	]
	[
		"implements" name = Name()												{ behavior_declaration.implements_names.add(name.name); }
		(
			"," name = Name()												{ behavior_declaration.implements_names.add(name.name); }
		)*
	]

	"{" 
		(
		    LOOKAHEAD("enum") enumeration = Enumeration()									{ behavior_declaration.enumerations.add(enumeration); }
		  | LOOKAHEAD(<IDENTIFIER> FormalParameters()) constructor = ConstructorDeclaration()					{ behavior_declaration.constructors.add(constructor); }
		  | LOOKAHEAD(Type() <IDENTIFIER> "(") message_handler = MessageHandlerDeclaration()			{ behavior_declaration.message_handlers.add(message_handler); }
		  | variable_declaration = LocalVariableDeclaration() ";" 									{ behavior_declaration.variable_declarations.add(variable_declaration); }
		)* 
	t2 = "}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ 
        behavior_declaration.initLineAndColumn(t, t2);
        return behavior_declaration;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CEnumeration Enumeration() : {/*@bgen(jjtree) Enumeration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTENUMERATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CEnumeration enumeration = new CEnumeration();
	String name;
	Token t;
} {/*@bgen(jjtree) Enumeration */
        try {
/*@egen*/
	"enum"
	t = <IDENTIFIER>			{ enumeration.name = t.image; }
	"{"
		t = <IDENTIFIER>
		(
			"," t = <IDENTIFIER>	{ enumeration.fields.add(t.image); }
		)*
	"}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	
	{ return enumeration; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CType Type() : {/*@bgen(jjtree) Type */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CType type;
    CPrimitiveType primitiveType = null;
    CName name = null;
    String arraySize = "";
} {/*@bgen(jjtree) Type */
        try {
/*@egen*/
	(
		  primitiveType = PrimitiveType()
		| name = Name()
	) ( 
		"[" "]" { arraySize += "[]"; }
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
        if (primitiveType != null) {
            type = new CType(primitiveType.name + arraySize);
            type.initLineAndColumn(primitiveType);
        } else {
            type = new CType(name.name + arraySize);
            type.initLineAndColumn(name);
        }
        return type;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CPrimitiveType PrimitiveType() : {/*@bgen(jjtree) PrimitiveType */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTPRIMITIVETYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CPrimitiveType type;
    Token t;
} {/*@bgen(jjtree) PrimitiveType */
        try {
/*@egen*/
	(
		  t = "boolean"
		| t = "char"
		| t = "byte"
		| t = "short"
		| t = "int"
		| t = "long"
		| t = "float"
		| t = "double"
		| t = "ack"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{
        type = new CPrimitiveType(t.image);
        type.initLineAndColumn(t); 
        return type;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CMessageHandler InterfaceMessageHandlerDeclaration() : {/*@bgen(jjtree) InterfaceMessageHandlerDeclaration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTINTERFACEMESSAGEHANDLERDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CMessageHandler message_handler = new CMessageHandler();
	CType pass_type;
	String name;
	Token t, t2;
	Vector<CFormalParameter> parameters;
} {/*@bgen(jjtree) InterfaceMessageHandlerDeclaration */
        try {
/*@egen*/
	pass_type = Type()
	t = <IDENTIFIER>
	parameters = FormalParameters()
    t2 = ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		message_handler.pass_type = pass_type.name;
		message_handler.name = t.image;
		message_handler.parameters = parameters;
        message_handler.initLineAndColumn(pass_type, t2);
		return message_handler;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CMessageHandler MessageHandlerDeclaration() : {/*@bgen(jjtree) MessageHandlerDeclaration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMESSAGEHANDLERDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CMessageHandler message_handler = new CMessageHandler();
	CType pass_type;
	String name;
	Token t;
	Vector<CFormalParameter> parameters;
	CBlock block;
} {/*@bgen(jjtree) MessageHandlerDeclaration */
        try {
/*@egen*/
	pass_type = Type()
	t = <IDENTIFIER>
	parameters = FormalParameters()
	block = Block()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		message_handler.pass_type = pass_type.name;
		message_handler.name = t.image;
		message_handler.parameters = parameters;
		message_handler.block = block;
        message_handler.initLineAndColumn(pass_type, block);
		return message_handler;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CConstructor ConstructorDeclaration() : {/*@bgen(jjtree) ConstructorDeclaration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTCONSTRUCTORDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CConstructor constructor = new CConstructor();
	Token t;
	Vector<CFormalParameter> parameters;
	CBlock block;
} {/*@bgen(jjtree) ConstructorDeclaration */
        try {
/*@egen*/
	t = <IDENTIFIER>
	parameters = FormalParameters()
	block = Block()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		constructor.name = t.image;
		constructor.parameters = parameters;
		constructor.block = block;
        constructor.initLineAndColumn(t, block);
		return constructor;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

Vector<CFormalParameter> FormalParameters() : {/*@bgen(jjtree) FormalParameters */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFORMALPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Vector<CFormalParameter> parameters = new Vector<CFormalParameter>();
	CVariable variable;
	String type;
	Token t;
	CFormalParameter formal_parameter;
} {/*@bgen(jjtree) FormalParameters */
        try {
/*@egen*/
	"(" [
		formal_parameter = FormalParameter()			{ parameters.add(formal_parameter); }
		(
			"," formal_parameter = FormalParameter()	{ parameters.add(formal_parameter); }
		)*
	] ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return parameters; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CFormalParameter FormalParameter() : {/*@bgen(jjtree) FormalParameter */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFORMALPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CFormalParameter formal_parameter;
	CType type;
	Token t;
} {/*@bgen(jjtree) FormalParameter */
        try {
/*@egen*/
	type = Type() t = <IDENTIFIER>      {
									        formal_parameter = new CFormalParameter();
									        formal_parameter.type = type.name;
									        formal_parameter.name = t.image;
							        	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{
        formal_parameter.initLineAndColumn(type, t);
        return formal_parameter;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CBlock Block() : {/*@bgen(jjtree) Block */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CBlock block = new CBlock();
	CStatement statement;
	Token t1, t2;
} {/*@bgen(jjtree) Block */
        try {
/*@egen*/
	t1 = "{" (
		statement = Statement()		{ block.statements.add(statement); }
	)* t2 = "}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{
        block.initLineAndColumn(t1, t2);
        return block;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CStatement Statement() : {/*@bgen(jjtree) Statement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CStatement statement;
	Token t = null;
} {/*@bgen(jjtree) Statement */
        try {
/*@egen*/
	(
		  statement = PassStatement()
		| statement = IfStatement()
		| statement = SwitchStatement()
		| statement = Block()
		| statement = ForStatement()
		| statement = WhileStatement()
		| statement = CaseStatement()
		| statement = BreakStatement()
		| statement = DefaultStatement()
		| LOOKAHEAD(<IDENTIFIER> ":") statement = LabelStatement()
		| LOOKAHEAD(["token"] Type() <IDENTIFIER>) statement = LocalVariableDeclaration()	( t = "@" | t = ";" )
		| statement = StatementExpression()							( t = "@" | t = ";" )
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ 
		if (t != null && t.image.equals("@")) {
			statement.continues = true;
		} else {
			statement.continues = false;
		}
		return statement;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}	

CPassStatement PassStatement() : {/*@bgen(jjtree) PassStatement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTPASSSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CPassStatement pass_statement = new CPassStatement();
	Token t = null;
} {/*@bgen(jjtree) PassStatement */
        try {
/*@egen*/
	"pass" [t = "later" | pass_statement.expression = Expression()] ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{
		if (t != null) pass_statement.will_pass_later = true;
		return pass_statement;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CStatementExpression StatementExpression() : {/*@bgen(jjtree) StatementExpression */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSTATEMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CStatementExpression statement_expression = new CStatementExpression();
} {/*@bgen(jjtree) StatementExpression */
        try {
/*@egen*/
	statement_expression.expression = Expression()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return statement_expression; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


CLocalVariableDeclaration ForInit() : {/*@bgen(jjtree) ForInit */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFORINIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLocalVariableDeclaration local_variable_declaration = new CLocalVariableDeclaration();
	CType type;
	CVariableInit variable_init;
} {/*@bgen(jjtree) ForInit */
        try {
/*@egen*/
	type = Type()						{ local_variable_declaration.type = type.name; }
	variable_init = VariableInitialization()		{ local_variable_declaration.variables.add(variable_init); }

	(	LOOKAHEAD(",") "," 
		variable_init = VariableInitialization()	{ local_variable_declaration.variables.add(variable_init); }
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return local_variable_declaration; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CForStatement ForStatement() : {/*@bgen(jjtree) ForStatement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFORSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CForStatement for_statement = new CForStatement();
	CExpression init, increment;
} {/*@bgen(jjtree) ForStatement */
        try {
/*@egen*/
	"for" "("
			[
				  LOOKAHEAD(ForInit()) for_statement.init = ForInit()
				| (
					init = Expression()					{ for_statement.expression_inits.add(init); }
					(
						LOOKAHEAD(",") "," init = Expression()		{ for_statement.expression_inits.add(init); }
					)*
				  )
			]
		";"
			for_statement.conditional = Expression()
		";"
			increment = Expression()						{ for_statement.increment_expressions.add(increment); }
			(
				LOOKAHEAD(",") "," increment = Expression()			{ for_statement.increment_expressions.add(increment); }
			)*
	")"
	for_statement.statement = Statement()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return for_statement; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CWhileStatement WhileStatement() : {/*@bgen(jjtree) WhileStatement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CWhileStatement while_statement = new CWhileStatement();
} {/*@bgen(jjtree) WhileStatement */
        try {
/*@egen*/
	"while" "(" while_statement.conditional = Expression() ")" while_statement.block = Block()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return while_statement; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CIfStatement IfStatement() : {/*@bgen(jjtree) IfStatement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CIfStatement if_statement = new CIfStatement();
} {/*@bgen(jjtree) IfStatement */
        try {
/*@egen*/
	"if" "(" if_statement.expression = Expression() ")" if_statement.statement = Statement() [ LOOKAHEAD("else") "else" if_statement.else_statement = Statement() ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return if_statement; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CSwitchStatement SwitchStatement() : {/*@bgen(jjtree) SwitchStatement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSWITCHSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CSwitchStatement switch_statement = new CSwitchStatement();
	CExpression expression;
	CStatement statement;
} {/*@bgen(jjtree) SwitchStatement */
        try {
/*@egen*/
	"switch" "(" expression = Expression() ")" "{"			{ switch_statement.expression = expression; }
		(
			statement = Statement()				{ switch_statement.statements.add(statement); }
		)*
	"}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return switch_statement; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CCaseStatement CaseStatement() : {/*@bgen(jjtree) CaseStatement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTCASESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CCaseStatement case_statement = new CCaseStatement();
	CExpression expression;
} {/*@bgen(jjtree) CaseStatement */
        try {
/*@egen*/
	"case" expression = Expression() ":"				{ case_statement.expression = expression; }/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return case_statement; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CDefaultStatement DefaultStatement() : {/*@bgen(jjtree) DefaultStatement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTDEFAULTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CDefaultStatement default_statement = new CDefaultStatement();
} {/*@bgen(jjtree) DefaultStatement */
        try {
/*@egen*/
	"default" ":"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return default_statement; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLabelStatement LabelStatement() : {/*@bgen(jjtree) LabelStatement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTLABELSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLabelStatement label_statement = new CLabelStatement();
	Token t;
} {/*@bgen(jjtree) LabelStatement */
        try {
/*@egen*/
	t = <IDENTIFIER> ":"						{ label_statement.label = t.image; }/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return label_statement; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CBreakStatement BreakStatement() : {/*@bgen(jjtree) BreakStatement */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBREAKSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CBreakStatement break_statement = new CBreakStatement();
} {/*@bgen(jjtree) BreakStatement */
        try {
/*@egen*/
	"break" ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return break_statement; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLocalVariableDeclaration LocalVariableDeclaration() : {/*@bgen(jjtree) LocalVariableDeclaration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTLOCALVARIABLEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLocalVariableDeclaration local_variable_declaration = new CLocalVariableDeclaration();
	CType type;
	CVariableInit variable_init;
    Token t = null;
} {/*@bgen(jjtree) LocalVariableDeclaration */
        try {
/*@egen*/
	[	
		t = "token"                                 { local_variable_declaration.is_token = true; }
	]
	type = Type()                                   { local_variable_declaration.type = type.name; }
	variable_init = VariableInitialization()		{ local_variable_declaration.variables.add(variable_init); }

	(	LOOKAHEAD(",") "," 
		variable_init = VariableInitialization()	{ local_variable_declaration.variables.add(variable_init); }
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{
        if (t != null) local_variable_declaration.initLineAndColumn(t);
        else local_variable_declaration.initLineAndColumn(type);

        return local_variable_declaration;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CVariableInit VariableInitialization() : {/*@bgen(jjtree) VariableInitialization */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTVARIABLEINITIALIZATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
	CVariableInit variable_init = new CVariableInit();
	CExpression expression;
} {/*@bgen(jjtree) VariableInitialization */
        try {
/*@egen*/
	t = <IDENTIFIER>					{ variable_init.name = t.image; }
	[
		LOOKAHEAD("=") "=" expression = Expression()	{ variable_init.expression = expression; }
	]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/	

	{
        variable_init.initLineAndColumn(t);
        return variable_init;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CArrayInit ArrayInitialization() : {/*@bgen(jjtree) ArrayInitialization */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTARRAYINITIALIZATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CArrayInit array_init = new CArrayInit();
	CArrayInit sub_array_init;
	CExpression init;
} {/*@bgen(jjtree) ArrayInitialization */
        try {
/*@egen*/
	"{" [
		(	
			  sub_array_init = ArrayInitialization()		{ array_init.inits.add(sub_array_init); }
			| init = Expression()					{ array_init.inits.add(init); }
		)

		(","
			(
				  sub_array_init = ArrayInitialization()	{ array_init.inits.add(sub_array_init); }
				| init = Expression()				{ array_init.inits.add(init); }
			)
		)*
	] "}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return array_init; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CExpression Expression() : {/*@bgen(jjtree) Expression */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CExpression expression = new CExpression();
	Token t1 = null, t2 = null;
	Vector<String> prefixes = new Vector<String>();
	Vector<Object> suffixes = new Vector<Object>();
	String type;
} {/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	(
		  t1 = "++"								{ prefixes.add(t1.image); }
		| t1 = "--"								{ prefixes.add(t1.image); }
		| t1 = "!"								{ prefixes.add(t1.image); }
		| t1 = "-"								{ prefixes.add(t1.image); }
		| t1 = "~"								{ prefixes.add(t1.image); }
	)*

	expression.value = Value()

	(
		  t2 = "++"								{ suffixes.add(t2.image); }
		| t2 = "--"								{ suffixes.add(t2.image); }
	)*

	[
		(
			  expression.operator = AssignmentOperator()
			| expression.operator = Operator()
		)
		expression.operator_expression = Expression()
	]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{
        expression.initLineAndColumn(expression.value);
        if (t1 != null) {
            expression.initLineAndColumnBegin(t1);
        }
        if (t2 != null) {
            expression.initLineAndColumnEnd(t2);
        }

		expression.suffixes = suffixes;
		expression.prefixes = prefixes;
		return expression;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CValue Value() : {/*@bgen(jjtree) Value */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CValue value = new CValue();
	CAllocation allocation;
	CExpression expression;
	CMessageSend message_send;
    CMethodInvocation method_invocation;
    CFieldAccess field_access;
	CType type;
    CVariableName variableName;
	Token t, t2;
    Token beginToken, endToken;
    boolean hasBegin = false;
} {/*@bgen(jjtree) Value */
        try {
/*@egen*/
	[
		LOOKAHEAD( "(" type = Type() ")" )
		beginToken = "(" type = Type() ")"		                            { value.cast_type = type.name; value.initLineAndColumnBegin(beginToken); hasBegin = true;}
	]
	(
		  value.literal = Literal()                                         { value.initLineAndColumnEnd( value.literal );                                  if (!hasBegin) value.initLineAndColumnBegin( value.literal ); }
        | variableName = VariableName()                                     { value.variable_name = variableName; value.initLineAndColumnEnd(variableName); if (!hasBegin) value.initLineAndColumnBegin(variableName); }
		| beginToken = "(" expression = Expression() endToken = ")"         { value.expression = expression; value.initLineAndColumnEnd(endToken);          if (!hasBegin) value.initLineAndColumnBegin(beginToken); }
		| allocation = Allocation()					                        { value.allocation = allocation; value.initLineAndColumnEnd(allocation);        if (!hasBegin) value.initLineAndColumnBegin(allocation); }
	)
	(
          LOOKAHEAD( "[" )
          t = "[" expression = Expression() t2 = "]"                        {
                                                                                CArrayAccess array_access = new CArrayAccess(expression);
                                                                                array_access.initLineAndColumn(t, t2);
                                                                                value.modifications.add(array_access);
                                                                                if (System.getProperty("debugValue") != null) System.out.println("In CValue, adding array access");
                                                                                value.initLineAndColumnEnd(t2);
                                                                            }
        | LOOKAHEAD( "<-" )
          message_send = MessageSend()                                      { value.modifications.add(message_send); value.initLineAndColumnEnd(message_send); }
        | LOOKAHEAD( "." <IDENTIFIER> "(")
          method_invocation = MethodInvocation()                            { value.modifications.add(method_invocation); value.initLineAndColumnEnd(method_invocation); }
        | field_access = FieldAccess()                                      { value.modifications.add(field_access); value.initLineAndColumnEnd(field_access); }
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return value; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CVariableName VariableName() : {/*@bgen(jjtree) VariableName */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTVARIABLENAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    CVariableName variableName = new CVariableName();
    Token t;
} {/*@bgen(jjtree) VariableName */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        variableName.name = t.image;
        variableName.initLineAndColumn(t);
        return variableName;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

CFieldAccess FieldAccess() : {/*@bgen(jjtree) FieldAccess */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFIELDACCESS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    CFieldAccess field_access = new CFieldAccess();
    Token t, t1;
} {/*@bgen(jjtree) FieldAccess */
    try {
/*@egen*/
    t1 = "." t = <IDENTIFIER>                                   { field_access.name = t.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        field_access.initLineAndColumn(t1, t);
        return field_access;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

CMethodInvocation MethodInvocation() : {/*@bgen(jjtree) MethodInvocation */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMETHODINVOCATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    CMethodInvocation method_invocation = new CMethodInvocation();
    CArguments arguments;
    Token t, invoket;
} {/*@bgen(jjtree) MethodInvocation */
    try {
/*@egen*/
    invoket = "."
    t = <IDENTIFIER>                    {   if (System.getProperty("debugMethodInvocation") != null) System.out.println("in method invocation, identifier = " + t.image); }
    arguments = Arguments()             {
                                            method_invocation.method_name = t.image;
                                            method_invocation.arguments = arguments.arguments;
                                            method_invocation.initLineAndColumn(invoket, arguments);
                                        }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    { return method_invocation; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                        
}

CMessageSend MessageSend() : {/*@bgen(jjtree) MessageSend */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMESSAGESEND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CMessageSend message_send = new CMessageSend();
	CMessageProperty message_property;
	CArguments arguments;
	Token t, invoket;
} {/*@bgen(jjtree) MessageSend */
    try {
/*@egen*/
    invoket = "<-"
    t = <IDENTIFIER>
    arguments = Arguments()             {
                                            message_send.message_name = t.image;
                                            message_send.arguments = arguments. arguments;
                                            message_send.initLineAndColumn(invoket, arguments);
                                        }

    [ 
      LOOKAHEAD( ":" ( "delay" | "waitfor") )
      message_property = MessageProperty()          { message_send.message_property = message_property; }
    ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return message_send; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

CMessageProperty MessageProperty() : {/*@bgen(jjtree) MessageProperty */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTMESSAGEPROPERTY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CMessageProperty message_property = new CMessageProperty();
	CArguments arguments;
} {/*@bgen(jjtree) MessageProperty */
        try {
/*@egen*/
	":"
	(
		  "delay" 				{ message_property.name = "delay"; }
		| "waitfor"				{ message_property.name = "waitfor"; }
	)
	arguments = Arguments()				{ message_property.arguments = arguments.arguments; }/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return message_property; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CArguments Arguments() : {/*@bgen(jjtree) Arguments */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTARGUMENTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    CArguments arguments = new CArguments();
	CExpression expression;
    Token t1, t2;
} {/*@bgen(jjtree) Arguments */
        try {
/*@egen*/
	t1 = "(" [
		expression = Expression()		{ arguments.arguments.add(expression); }
		(","
			expression = Expression()	{ arguments.arguments.add(expression); }
		)*
	] t2 = ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{
        arguments.initLineAndColumn(t1, t2);
        return arguments;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CAllocation Allocation() : {/*@bgen(jjtree) Allocation */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTALLOCATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CAllocation allocation = new CAllocation();
    CArguments arguments;
    CName type;
    CPrimitiveType ptype;
    Token t;
} {/*@bgen(jjtree) Allocation */
        try {
/*@egen*/
	(
		 LOOKAHEAD("new" Name() "(")
		 (
			t = "new"
			type = Name()
			arguments = Arguments()                         { allocation.arguments = arguments.arguments; }
			[ BindDeclaration(allocation) ]                 { allocation.type = type.name; }
		  )
		| (	
			t = "new"                                       { allocation.initLineAndColumn(t); }
			(
				  ptype = PrimitiveType()                   { allocation.type = ptype.name; }
				| type = Name()                             { allocation.type = type.name; }
			)
			ArrayDimsAndInits(allocation)
		  )
		| (
			t = "reference"                                 { allocation.remote_reference = true; }
			type = Name()
			BindDeclaration(allocation)                     { allocation.type = type.name; }
		  )
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{
        allocation.initLineAndColumnBegin(t);
        return allocation;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void BindDeclaration(CAllocation allocation) : {/*@bgen(jjtree) BindDeclaration */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBINDDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CExpression expression;
} {/*@bgen(jjtree) BindDeclaration */
        try {
/*@egen*/
	"at" "("
		expression = Expression()		{ allocation.first_expression = expression; }
	[
		"," expression = Expression()		{ allocation.second_expression = expression; }
		"," expression = Expression()		{ allocation.third_expression = expression; }
	] ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ArrayDimsAndInits(CAllocation allocation) : {/*@bgen(jjtree) ArrayDimsAndInits */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTARRAYDIMSANDINITS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CExpression expression;
} {/*@bgen(jjtree) ArrayDimsAndInits */
        try {
/*@egen*/
	(
		  LOOKAHEAD("[" "]")
		  (
			(
				LOOKAHEAD("[" "]")
				"[" "]"					{ allocation.array_dimensions++; }
			)+
			[	LOOKAHEAD( ArrayInitialization() )
				allocation.array_init = ArrayInitialization()
			]
		  )
		| (
									{ allocation.array_arguments = new Vector<CExpression>(); }
			(
				LOOKAHEAD("[" Expression() "]")
				"[" expression = Expression() "]"	{
										allocation.array_arguments.add(expression);
										allocation.array_dimensions++;
									}
			)+
			(
				LOOKAHEAD ("[" "]")
				"[" "]"					{ allocation.array_dimensions++; }
			)*
		  )
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLiteral Literal() : {/*@bgen(jjtree) Literal */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLiteral literal;
} {/*@bgen(jjtree) Literal */
        try {
/*@egen*/
	(
		  literal = SelfLiteral()
		| literal = ParentLiteral()
		| literal = IntegerLiteral()
		| literal = FloatingPointLiteral()
		| literal = CharacterLiteral()
		| literal = StringLiteral()
		| literal = BooleanLiteral()
		| literal = NullLiteral()
		| literal = AcknowledgementLiteral()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return literal; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLiteral SelfLiteral() : {/*@bgen(jjtree) SelfLiteral */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSELFLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    CLiteral literal = new CLiteral();
    literal.type = "self";
    Token t;
} {/*@bgen(jjtree) SelfLiteral */
    try {
/*@egen*/
    t = "self"                          { literal.value = "self"; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        literal.initLineAndColumn(t);
        return literal;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

CLiteral ParentLiteral() : {/*@bgen(jjtree) ParentLiteral */
    SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTPARENTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    CLiteral literal = new CLiteral();
    literal.type = "parent";
    Token t;
} {/*@bgen(jjtree) ParentLiteral */
    try {
/*@egen*/
    t = "parent"                          { literal.value = "parent"; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        literal.initLineAndColumn(t);
        return literal;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


CLiteral IntegerLiteral() : {/*@bgen(jjtree) IntegerLiteral */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTINTEGERLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLiteral literal = new CLiteral();
	literal.type = "int";
	Token t;
} {/*@bgen(jjtree) IntegerLiteral */
        try {
/*@egen*/
	t  = <INTEGER_LITERAL>			{ literal.value = t.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        literal.initLineAndColumn(t);
	    return literal;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLiteral FloatingPointLiteral() : {/*@bgen(jjtree) FloatingPointLiteral */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTFLOATINGPOINTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLiteral literal = new CLiteral();
	literal.type = "double";
	Token t;
} {/*@bgen(jjtree) FloatingPointLiteral */
        try {
/*@egen*/
	t = <FLOATING_POINT_LITERAL>		{ literal.value = t.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        literal.initLineAndColumn(t);
	    return literal;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLiteral CharacterLiteral() : {/*@bgen(jjtree) CharacterLiteral */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTCHARACTERLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLiteral literal = new CLiteral();
	literal.type = "char";
	Token t;
} {/*@bgen(jjtree) CharacterLiteral */
        try {
/*@egen*/
	t = <CHARACTER_LITERAL>			{ literal.value = t.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        literal.initLineAndColumn(t);
	    return literal;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLiteral StringLiteral() : {/*@bgen(jjtree) StringLiteral */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTSTRINGLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLiteral literal = new CLiteral();
	literal.type = "String";
	Token t;
} {/*@bgen(jjtree) StringLiteral */
        try {
/*@egen*/
	t = <STRING_LITERAL>			{ literal.value = t.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        literal.initLineAndColumn(t);
        return literal;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLiteral BooleanLiteral() : {/*@bgen(jjtree) BooleanLiteral */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTBOOLEANLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLiteral literal = new CLiteral();
	literal.type = "boolean";
	Token t;
} {/*@bgen(jjtree) BooleanLiteral */
        try {
/*@egen*/
	(
		  t = "true"
		| t = "false"
	)					{ literal.value = t.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        literal.initLineAndColumn(t);
	    return literal;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLiteral NullLiteral() : {/*@bgen(jjtree) NullLiteral */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTNULLLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLiteral literal = new CLiteral();
	literal.type = "null";
    Token t;
} {/*@bgen(jjtree) NullLiteral */
        try {
/*@egen*/
	t = "null"					{ literal.value = "null"; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        literal.initLineAndColumn(t);
	    return literal;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CLiteral AcknowledgementLiteral() : {/*@bgen(jjtree) AcknowledgementLiteral */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTACKNOWLEDGEMENTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	CLiteral literal = new CLiteral();
	literal.type = "ack";
    Token t;
} {/*@bgen(jjtree) AcknowledgementLiteral */
        try {
/*@egen*/
	t = "ack"					{ literal.value = "ack"; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/

    {
        literal.initLineAndColumn(t);
	    return literal;
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String AssignmentOperator() : {/*@bgen(jjtree) AssignmentOperator */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTASSIGNMENTOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
} {/*@bgen(jjtree) AssignmentOperator */
        try {
/*@egen*/
	(
		  t = "="
		| t = "*="
		| t = "/="
		| t = "%="
		| t = "+="
		| t = "-="
		| t = "<<="
		| t = ">>="
		| t = ">>>="
		| t = "&="
		| t = "^="
		| t = "|="
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

String Operator() : {/*@bgen(jjtree) Operator */
        SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(JJTOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t;
} {/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	(
		  t = "||"
		| t = "&&"
		| t = "|"
		| t = "^"
		| t = "&"
		| t = "=="
		| t = "!="
		| t = ">"
		| t = "<"
		| t = "<="
		| t = ">="
		| t = "<<"
		| t = ">>"
		| t = ">>>"
		| t = "+"
		| t = "-"
		| t = "*"
		| t = "/"
		| t = "%"
		| t = "instanceof"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{ return t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

