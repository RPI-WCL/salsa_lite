module salsa_lite.runtime.language;

import object java.util.LinkedList;

import object salsa_lite.runtime.Acknowledgement;

behavior ContinuationDirector extends Director {

	boolean unresolved = true;
	LinkedList<Message> messages = new LinkedList<Message>();
    ContinuationDirector currentContinuation = null; 

	ContinuationDirector() {}

    /**
     *  This is used for statements like:  'token ack ta = ack;'
     *  i.e., an already resolved continution.
     */
    ContinuationDirector(Acknowledgement acknowledgement) {
        self.unresolved = false;
    }

    //This should only ever get called once.
	ack resolve() {
        if (unresolved) unresolved = false;

        while (messages.size() > 0) {
            Message message  = messages.removeFirst();
            StageService.sendMessage(message);
        } 
        if (currentContinuation != null) currentContinuation<-resolve();
	}

	ack setMessage(Message message) {
		if (unresolved) {
			messages.add(message);
		} else {
			StageService.sendMessage(message);
		}
	}

    ack forwardTo(Director director) {
        if (unresolved) {
            currentContinuation = (ContinuationDirector)director;
        } else {
            ((ContinuationDirector)director)<-resolve();
        }
    }

}
