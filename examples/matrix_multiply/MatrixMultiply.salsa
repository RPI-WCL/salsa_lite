module examples.matrixmultiply;

behavior MatrixMultiply {
	/**
	 *	A[a b] * B[e f] = C[r s] 
	 *	 [c d]    [g h]    [t u]
	 *
	 *	where:
	 *		r = ae+bg
	 *		s = af+bh
	 *		t = ce+dg
	 *		u = cf+dh
	 */

	public long time;

	public MatrixMultiply() {
	}

	public void act(String[] arguments) {
		if (arguments.length != 2) {
			System.err.println("Usage: java examples.matrixmultiply.MatrixMultiply <matrix_size> <recursion_depth>");
			System.err.println("\tNote: matrix_size must be a power of 2: 1024, 2048, 4096, 8192, 16384...2^N");
			System.err.println("\tNote: will create 8^recursion_depth actors.");
			System.exit(0);
		}

		int matrix_size = Integer.parseInt(arguments[0]);
		int recursion_depth = Integer.parseInt(arguments[1]);
		int number_actors = (int)Math.pow(8,recursion_depth);

		double[][] A = new double[matrix_size][matrix_size];
		for (int i = 0; i < matrix_size; i++) {
			for (int j = 0; j < matrix_size; j++) {
				A[i][j] = Math.random();
			}
		}
		double[][] B = new double[matrix_size][matrix_size];
		for (int i = 0; i < matrix_size; i++) {
			for (int j = 0; j < matrix_size; j++) {
				B[i][j] = Math.random();
			}
		}

		System.out.println("Number of actors: " + number_actors);
		System.out.println("Matrix size: " + matrix_size + " x " + matrix_size);

//		standardOutput<-println("Number of actors: " + number_actors) @
//		standardOutput<-println("Matrix size: " + matrix_size + " x " + matrix_size) @
//		printMatrix(A) @
//		printMatrix(B) @
		token C = matrix_multiply(recursion_depth, A, B) @
		finished();
			
//		printMatrix(C);
		time = System.currentTimeMillis();
	}

	public void finished() {
		System.err.println("Multiplied in: " + (System.currentTimeMillis()-time));
	}

	public double[][] getSection(double[][] matrix, int x, int x_max, int y, int y_max) {
		int x_length = x_max - x;
		int y_length = y_max - y;
		double[][] result = new double[x_length][y_length];

		for (int i = 0; i < x_length; i++) {
			for (int j = 0; j < y_length; j++) {
				result[i][j] = matrix[x+i][x+j];
			}
		}
		return result;
	}

	public double[][] matrix_multiply(int depth, double[][] A, double[][] B) {
		/**
		 *	Check to see if matrices are square
		 */
		if (A.length != A[0].length) {
			standardOutput<-println("Matrix A not square: ") @
			printMatrix(A);
		}
		if (B.length != B[0].length) {
			standardOutput<-println("Matrix B not square: ") @
			printMatrix(B);
		}
		if ((A.length%2 != 0) || (A[0].length%2 != 0)) {
			standardOutput<-println("Matrix A not even: ") @
			printMatrix(A);
		}
		if ((B.length%2 != 0) || (B[0].length%2 != 0)) {
			standardOutput<-println("Matrix B not even: ") @
			printMatrix(B);
		}


		if (depth == 0) multiply(A, B) @ currentContinuation;
		else {
			depth--;

			MatrixMultiply[] workers = new MatrixMultiply[8];
			for (int i = 0; i < 8; i++) {
				workers[i] = new MatrixMultiply();
			}
			token a = getSection(A, 0, A.length/2, 0, A.length/2);
			token b = getSection(A, A.length/2, A.length, 0, A.length/2);
			token c = getSection(A, 0, A.length/2, A.length/2, A.length);
			token d = getSection(A, A.length/2, A.length, A.length/2, A.length);

			token e = getSection(B, 0, A.length/2, 0, A.length/2);
			token f = getSection(B, A.length/2, A.length, 0, A.length/2);
			token g = getSection(B, 0, A.length/2, A.length/2, A.length);
			token h = getSection(B, A.length/2, A.length, A.length/2, A.length);

			token ae =	workers[0]<-multiply(a, e);
			token bg =	workers[1]<-multiply(b, g);
			token r =	workers[1]<-add(ae, bg);

			token af =	workers[2]<-multiply(a, f);
			token bh =	workers[3]<-multiply(b, h);
			token s =	workers[3]<-add(af, bh);

			token ce =	workers[4]<-multiply(c, e);
			token cg =	workers[5]<-multiply(c, g);
			token t =	workers[5]<-add(cg, ce);

			token cf =	workers[6]<-multiply(c, f);
			token dh =	workers[7]<-multiply(d, h);
			token u =	workers[7]<-add(cf, dh);

			compose(r, s, t, u) @ currentContinuation;
		}
	}
	
	public void printMatrix(double[][] m) {
		System.err.println("Matrix:");
		for (int i = 0; i < m.length; i++) {
			System.err.print("[ ");
			for (int j = 0; j < m.length; j++) {
				System.err.print(m[i][j] + " ");
			}
			System.err.println("]");
		}
		standardOutput<-println();
	}

	public double[][] add(double[][] a, double[][] b) {
		double[][] result = new double[a.length][a.length];
		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a.length; j++) {
				result[i][j] = a[i][j] + b[i][j];
			}
		}
		return result;
	}

	public double[][] multiply(double[][] a, double[][] b) {
		double[][] result = new double[a.length][a.length];

		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a.length; j++) {
				result[i][j] = 0;

				for (int k = 0; k < a.length; k++) {
					result[i][j] += a[i][k]*b[k][j];
				}
			}
		}
		return result;
	}

	public double[][] compose(double[][] r, double[][] s, double[][] t, double[][] u) {
		double[][] result = new double[r.length*2][r.length*2];

		for (int i = 0; i < r.length; i++) {
			for (int j = 0; j < r.length; j++) {
				result[i][j] = r[i][j];
			}
		}
		for (int i = r.length; i < 2*r.length; i++) {
			for (int j = 0; j < r.length; j++) {
				result[i][j] = s[i-r.length][j];
			}
		}
		for (int i = 0; i < r.length; i++) {
			for (int j = r.length; j < 2*r.length; j++) {
				result[i][j] = t[i][j-r.length];
			}
		}
		for (int i = r.length; i < 2*r.length; i++) {
			for (int j = r.length; j < 2*r.length; j++) {
				result[i][j] = r[i-r.length][j-r.length];
			}
		}
		return result;
	}
}
