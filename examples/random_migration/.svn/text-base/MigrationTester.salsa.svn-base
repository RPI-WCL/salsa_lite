import salsa.io.StandardOutput;
import salsa.util.System;

begin_java/*
	import java.io.BufferedReader;
	import java.io.FileReader;
	import java.util.StringTokenizer;
	import java.util.Vector;
*/end_java

behavior MigrationTester {
	String[] hosts;
	int[] ports;
	String name_server;

	MigrationWorker[] workers;

	MigrationTester(String[] args) {
		if (args<-length() != 3) {
			StandardOutput<-println("Incorrect arguments.") @
			StandardOutput<-println("Usage:") @
			StandardOutput<-println("\tjava salsa.tests.distributed_random_fibonacci.DRFibonacci <theaters & nameserver file> <number_workers> <number_migrations>") @
			System<-exit(0);
		}

		int number_workers = Integer<-parseInt(args[1]);
		int number_migrations = Integer<-parseInt(args[2]);

		getTheaters(args[0]) @
		create_actors(number_workers) @
		migrate_actors(number_migrations) @
		StandardOutput<-println("Migration test with " + number_workers + " actors and " + number_migrations + " completed.");
	}

	ack getTheaters(String theater_file) {
		begin_java/*
		try {   
			BufferedReader in = new BufferedReader(new FileReader(theater_file));
			String line = in.readLine();

			name_server = "uan://" + line + "/";
			line = in.readLine();

			Vector theaters_vector = new Vector();
			while (line != null) {
				theaters_vector.add(line);
				line = in.readLine();
			}
			hosts = new String[theaters_vector.size()];
			ports = new int[theaters_vector.size()];

			for (int j = 0; j < theaters_vector.size(); j++) {
				StringTokenizer st = new StringTokenizer( (String)theaters_vector.get(j), ":");
				hosts[j] = st.nextToken();
				ports[j] = Integer.parseInt(st.nextToken());

			}
		} catch (Exception e) {
			System.err.println("Error reading theaters file: " + e);
			e.printStackTrace();
		}       
		*/end_java
	}        

	ack create_actors(int number_workers) {
		workers = new MigrationWorker[number_workers];

		for (int i = 0; i < number_workers; i++) {
			int target = (int)(hosts<-length() * Math<-random());
			workers[i] = new MigrationWorker() at (name_server + "worker_" + i, hosts[target], ports[target]);
		}
	}

	ack migrate_actors(int number_migrations) {
		{
			for (int i = 0; i < number_migrations; i++) {
				int target = (int)(hosts<-length() * Math<-random());

				(workers[ (int)(workers<-length() * Math<-random()) ])<-migrate(hosts[target], ports[target]);
			}
		} @ 
		pass;
	}
}
