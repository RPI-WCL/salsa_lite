module salsa_lite.local_fcs.language;

behavior MessageDirector {

	Message message;
	int required_tokens;
	ContinuationDirector continuation_token = null;

	MessageDirector(Message message, ContinuationDirector input_continuation) {
        self.message = message;
        self.required_tokens = 1;

        continuation<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 0 /*resolve*/, new Object[]{-1, null}) );
	}

    MessageDirector(Message message, ContinuationDirector[] input_continuations) {
        self.message = message;
        self.required_tokens = input_continuations.length;

        for (int i = 0; i < input_continuations; i++) {
            if (input_continuations[i] instanceof TokenDirector) {
                input_continuations[i]<-setMessage(new Message(Message.SIMPLE_MESSAGE, input_continuations[i], 1 /*setMessage*/, new Object[]{self, -1}));
            } else {
                input_continuations[i]<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 0 /*resolve*/, new Object[]{-1, null}) );
            }
        }

    }

    MessageDirector(Message message, Object[] arguments, int[] token_positions, ContinuationDirector input_continuation) {
        self.message = message;
        self.required_tokens = token_positions.length + 1;

        continuation<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 0 /*resolve*/, new Object[]{-1, null}) );

        for (int i = 0; i < token_positions.length; i++) {
            ((TokenDirector)arguments[token_positions[i]])<-addMessageDirector(self, token_positions[i]);
        }
    }

    MessageDirector(Message message, Object[] arguments, int[] token_positions) {
        self.message = message;
        self.required_tokens = token_positions.length;

        for (int i = 0; i < token_positions.length; i++) {
            ((TokenDirector)arguments[token_positions[i]])<-addMessageDirector(self, token_positions[i]);
        }
    }

    MessageDirector(Message message, Object[] arguments, int[] token_positions, ContinuationDirector[] input_continuations) {
        self.message = message;
        self.required_tokens = token_positions.length + input_continuations.length;

        for (int i = 0; i < token_positions.length; i++) {
            ((TokenDirector)arguments[token_positions[i]])<-addMessageDirector(self, token_positions[i]);
        }

        for (int i = 0; i < input_continuations.length; i++) {
            if (input_continuations[i] instanceof TokenDirector) {
                input_continuations[i]<-setMessage(new Message(Message.SIMPLE_MESSAGE, input_continuations[i], 1 /*setMessage*/, new Object[]{self, -1}));
            } else {
                input_continuations[i]<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 0 /*resolve*/, new Object[]{-1, null}) );
            }
        }
    }

	ack resolve(int position, Object value) {
        if (position >= 0) message.arguments[position] = value;
		required_tokens--;

//        System.err.println("Resolved message director, position: " + position + ", value: " + value + ", required_tokens: " + required_tokens);

		if (required_tokens <= 0) {
			if (continuation_token == null) {
//                System.err.println("sending message to message target: " + message.target + ", message: " + message);
				StageService.sendMessage(message);
			} else {
//                System.err.println("sending message to continuation token: " + continuation_token + ", message: " + message);
				continuation_token<-setMessage(message);
			}
		}
	}
}
