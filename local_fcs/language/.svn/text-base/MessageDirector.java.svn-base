package salsa.local_fcs.language;

/****** SALSA LANGUAGE IMPORTS ******/
import salsa.local_fcs.SynchronousMailboxStage;
import salsa.local_fcs.LocalActor;
import salsa.local_fcs.Message;
import salsa.local_fcs.StageService;
import salsa.local_fcs.language.JoinDirector;
import salsa.local_fcs.language.MessageDirector;
import salsa.local_fcs.language.ContinuationDirector;
import salsa.local_fcs.language.TokenDirector;

import salsa.local_fcs.language.exceptions.ContinuationPassException;
import salsa.local_fcs.language.exceptions.TokenPassException;
import salsa.local_fcs.language.exceptions.MessageHandlerNotFoundException;
import salsa.local_fcs.language.exceptions.ConstructorNotFoundException;

/****** END SALSA LANGUAGE IMPORTS ******/


public class MessageDirector extends LocalActor {
	Message message;
	int required_tokens;
	ContinuationDirector continuation_token = null;


	public Object invokeImmutableMessage(int messageId, Object[] arguments) throws ContinuationPassException, TokenPassException, MessageHandlerNotFoundException {
		switch(messageId) {
			default: throw new MessageHandlerNotFoundException(messageId, arguments);
		}
	}

	public Object invokeMessage(int messageId, Object[] arguments) throws ContinuationPassException, TokenPassException, MessageHandlerNotFoundException {
		switch(messageId) {
			case 0: resolve( (Integer)arguments[0], (Object)arguments[1] ); return null;
			default: throw new MessageHandlerNotFoundException(messageId, arguments);
		}
	}

	public void invokeConstructor(int messageId, Object[] arguments) throws ConstructorNotFoundException {
		switch(messageId) {
			case 0: construct( (Message)arguments[0], (Integer)arguments[1] ); return;
			case 1: construct( (Message)arguments[0], (Integer)arguments[1], (ContinuationDirector)arguments[2] ); return;
			default: throw new ConstructorNotFoundException(messageId, arguments);
		}
	}

	public void construct(Message message, int required_tokens) {
		this.message = message;
		this.required_tokens = required_tokens;
	}

	public void construct(Message message, int required_tokens, ContinuationDirector continuation_token) {
		this.message = message;
		this.required_tokens = required_tokens;
	}



	public void resolve(int position, Object value) {
		message.arguments[position] = value;

		required_tokens--;
		if (required_tokens <= 0) {
			if (continuation_token == null) {
				StageService.sendMessage(message);

			}
			else {
				StageService.sendMessage(continuation_token, 1 /*setMessage*/, new Object[]{message});
			}

		}
		
	}


	public MessageDirector() { super(); }

	public MessageDirector(SynchronousMailboxStage stage) { super(stage); }

	public static MessageDirector getImmutableReference(SynchronousMailboxStage stage) {
		return new MessageDirector(stage);
	}

	public static TokenDirector construct(int constructor_id, Object[] arguments, int[] token_positions) {
		MessageDirector actor = new MessageDirector();
		TokenDirector output_continuation = TokenDirector.construct(0 /*construct()*/, null);
		Message input_message = new Message(Message.CONSTRUCT_MESSAGE, actor, constructor_id, arguments, output_continuation);
		MessageDirector md = MessageDirector.construct(0, new Object[]{input_message, token_positions.length});
		TokenDirector argument_token;
		for (int i = 0; i < token_positions.length; i++) {
			argument_token = (TokenDirector)arguments[token_positions[i]];
			StageService.sendMessage(new Message(Message.SIMPLE_MESSAGE, argument_token, 0 /*addMessageDirector*/, new Object[]{md, token_positions[i]}));
		}
		return output_continuation;
	}

	public static MessageDirector construct(int constructor_id, Object[] arguments) {
		MessageDirector actor = new MessageDirector();
		StageService.sendMessage(new Message(Message.CONSTRUCT_MESSAGE, actor, constructor_id, arguments));
		return actor;
	}
	public static TokenDirector construct(int constructor_id, Object[] arguments, int[] token_positions, SynchronousMailboxStage target_stage) {
		MessageDirector actor = new MessageDirector(target_stage);
		TokenDirector output_continuation = TokenDirector.construct(0 /*construct()*/, null, target_stage);
		Message input_message = new Message(Message.CONSTRUCT_MESSAGE, actor, constructor_id, arguments, output_continuation);
		MessageDirector md = MessageDirector.construct(0, new Object[]{input_message, token_positions.length}, target_stage);
		TokenDirector argument_token;
		for (int i = 0; i < token_positions.length; i++) {
			argument_token = (TokenDirector)arguments[token_positions[i]];
			argument_token.stage.putMessageInMailbox(new Message(Message.SIMPLE_MESSAGE, argument_token, 0 /*addMessageDirector*/, new Object[]{md, token_positions[i]}));
		}
		return output_continuation;
	}

	public static MessageDirector construct(int constructor_id, Object[] arguments, SynchronousMailboxStage target_stage) {
		MessageDirector actor = new MessageDirector(target_stage);
		target_stage.putMessageInMailbox(new Message(Message.CONSTRUCT_MESSAGE, actor, constructor_id, arguments));
		return actor;
	}
}
