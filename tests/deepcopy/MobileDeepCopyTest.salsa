import salsa_lite.io.StandardOutput;

import salsa_lite.runtime.wwc.NameServer;

import object java.util.ArrayList;

/**
 * Example usage:
 *      first run nameserver:
 *          java -Dnstages=3 -Dcalled="nameserver" -Dport=3030 salsa_lite.runtime.wwc.NameServer
 *      then run test:
 *          java -Dnstages=5 -Dcalled="mdc_test" -Dusing="127.0.0.1:3030/nameserver" MobileDeepCopyTest
 */

behavior MobileDeepCopyTest extends MobileActor {

    NameServer ns;
    int value;
    ArrayList<MobileDeepCopyTest> list = new ArrayList<MobileDeepCopyTest>();

    int getValue() {
        pass value;
    }

    ack setValue(int value) {
        self.value = value;
    }

    ack setList(ArrayList<MobileDeepCopyTest> list) {
        self.list = list;
    }

    ack printList() {
        StandardOutput standardOutput = new StandardOutput();

        token ack t = standardOutput<-println("MobileDeepCopyTest [value: " + value + "] printing:");
        for (MobileDeepCopyTest dct : list) {
            t = standardOutput<-println( dct<-getValue() ) : waitfor(t);
        }
        t = standardOutput<-println() : waitfor(t);

        pass t;
    }

    MobileDeepCopyTest(int value) {
        self.value = value;
    }

    MobileDeepCopyTest(String[] arguments) {
        ns = self.getNameServer();

        MobileDeepCopyTest dct1 = new MobileDeepCopyTest(1) called ("mdct1") using (ns);
        MobileDeepCopyTest dct2 = new MobileDeepCopyTest(2) called ("mdct2") using (ns);
        MobileDeepCopyTest dct3 = new MobileDeepCopyTest(3) called ("mdct3") using (ns);
        MobileDeepCopyTest dct4 = new MobileDeepCopyTest(4) called ("mdct4") using (ns);
        MobileDeepCopyTest dct5 = new MobileDeepCopyTest(5) called ("mdct5") using (ns);

        list.add(dct1);
        list.add(dct2);
        list.add(dct3);
        list.add(dct4);
        list.add(dct5);

        self<-migrate( ns.getHost(), ns.getPort() ) @
        self<-go() @
        self<-migrate ( self.getHost(), self.getPort() ) @  //arguments are resolved when the message 
                                                            //is sent so this will migrate the actor back to where it started.

        dct1<-migrate( ns.getHost(), ns.getPort() ) @
        dct3<-migrate( ns.getHost(), ns.getPort() ) @
        dct5<-migrate( ns.getHost(), ns.getPort() ) @
        self<-go() @

        self<-migrate( ns.getHost(), ns.getPort() ) @
        dct3<-migrate( self.getHost(), self.getPort() ) @
        dct1<-migrate( ns.getHost(), ns.getPort() ) @
        self<-go();
    }

    ack go() {
        StandardOutput standardOutput = new StandardOutput();
        standardOutput<-println("dct1 value: " + list.get(0)<-getValue()) @
        standardOutput<-println("dct2 value: " + list.get(1)<-getValue()) @
        standardOutput<-println("dct3 value: " + list.get(2)<-getValue()) @
        standardOutput<-println("dct4 value: " + list.get(3)<-getValue()) @
        standardOutput<-println("dct5 value: " + list.get(4)<-getValue()) @

        list.get(0)<-setList(list) @
        list.get(1)<-setList(list) @
        list.get(2)<-setList(list) @
        list.get(3)<-setList(list) @
        list.get(4)<-setList(list) @

        standardOutput<-println("\nsetLists.") @
        standardOutput<-println("dct1 value: " + list.get(0)<-getValue()) @
        standardOutput<-println("dct2 value: " + list.get(1)<-getValue()) @
        standardOutput<-println("dct3 value: " + list.get(2)<-getValue()) @
        standardOutput<-println("dct4 value: " + list.get(3)<-getValue()) @
        standardOutput<-println("dct5 value: " + list.get(4)<-getValue()) @

        list.get(0)<-setValue(6) @
        list.get(1)<-setValue(7) @
        list.get(2)<-setValue(8) @
        list.get(3)<-setValue(9) @
        list.get(4)<-setValue(10) @

        standardOutput<-println("\nupdated values.") @
        standardOutput<-println("dct1 value: " + list.get(0)<-getValue()) @
        standardOutput<-println("dct2 value: " + list.get(1)<-getValue()) @
        standardOutput<-println("dct3 value: " + list.get(2)<-getValue()) @
        standardOutput<-println("dct4 value: " + list.get(3)<-getValue()) @
        standardOutput<-println("dct5 value: " + list.get(4)<-getValue()) @

        standardOutput<-println("\nprinting lists.") @
        list.get(0)<-printList() @
        list.get(1)<-printList() @
        list.get(2)<-printList() @
        list.get(3)<-printList() @
        list.get(4)<-printList() @ pass;
    }
}
